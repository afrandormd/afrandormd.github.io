[{"categories":[],"content":"\rLoop pada Dart","date":"2024-04-18","objectID":"/posts/pemrograman-mobile/loop-dart/:1:0","series":["pemrograman-mobile"],"tags":["dart"],"title":"Loop Dart","uri":"/posts/pemrograman-mobile/loop-dart/#loop-pada-dart"},{"categories":[],"content":"\rApa itu Exceptions?Dalam bahasa pemrograman Exceptions adalah cara untuk menangani situasi yang tidak biasa atau kesalahan yang terjadi selama eksekusi program. Misalnya, ketika suatu kesalahan terjadi, Dart akan melemparkan (throw) exception, yang kemudian dapat ditangkap (caught) dan diolah oleh blok kode tertentu. ","date":"2024-04-17","objectID":"/posts/pemrograman-mobile/exceptions-dart/:1:0","series":["pemrograman-mobile"],"tags":["dart"],"title":"Exceptions Dart","uri":"/posts/pemrograman-mobile/exceptions-dart/#apa-itu-exceptions"},{"categories":[],"content":"\rMengapa Exceptions Penting? Error Handling Exceptions memungkinkan kita untuk mengidentifikasi dan menangani kesalahan saat program berjalan. Prevent Crashes Dengan menangkap exceptions, kita dapat mencegah program dari crash atau berhenti secara tiba - tiba ketika terjadi kesalahan. ","date":"2024-04-17","objectID":"/posts/pemrograman-mobile/exceptions-dart/:2:0","series":["pemrograman-mobile"],"tags":["dart"],"title":"Exceptions Dart","uri":"/posts/pemrograman-mobile/exceptions-dart/#mengapa-exceptions-penting"},{"categories":[],"content":"\rJenis - jenis Exceptions di Dart","date":"2024-04-17","objectID":"/posts/pemrograman-mobile/exceptions-dart/:3:0","series":["pemrograman-mobile"],"tags":["dart"],"title":"Exceptions Dart","uri":"/posts/pemrograman-mobile/exceptions-dart/#jenis---jenis-exceptions-di-dart"},{"categories":[],"content":"\rApa itu Asynchronous Programming?Dalam bahasa pemrograman asynchronous programming adalah teknik yang memungkinkan kode untuk berjalan secara non-blocking, artinya kode dapat menjalankan tugas - tugas yang membutuhkan waktu tanpa menghentikan eksekusi program. Hal ini sangat berguna saat melakukan operasi jaringan (seperti mengambil data dari internet), operasi file I/O, atau operasi yang membutuhkan waktu yang tidak dapat diprediksi. ","date":"2024-04-13","objectID":"/posts/pemrograman-mobile/asynchronous-dart/:1:0","series":["pemrograman-mobile"],"tags":["Dart"],"title":"Belajar Dart: Asynchronous","uri":"/posts/pemrograman-mobile/asynchronous-dart/#apa-itu-asynchronous-programming"},{"categories":[],"content":"\rMengapa Asynchronous Penting? Menghindari Blocking Dalam pemrograman asynchronous, program tidak perlu menunggu operasi yang memakan waktu untuk selesai sebelum melanjutkan eksekusi kode lainnya yang memungkinkan program bisa terus berjalan tanpa terblokir. Meningkatkan Responsivitas: Dengan asynchronous, program bisa menjalankan tugas - tugas lainnya selama menunggu operasi yang lambat, seperti memuat data dari internet. Hal ini meningkatkan responsivitas program, terutama dalam aplikasi yang interaktif. ","date":"2024-04-13","objectID":"/posts/pemrograman-mobile/asynchronous-dart/:2:0","series":["pemrograman-mobile"],"tags":["Dart"],"title":"Belajar Dart: Asynchronous","uri":"/posts/pemrograman-mobile/asynchronous-dart/#mengapa-asynchronous-penting"},{"categories":[],"content":"\rAsynchronous di DartDi bahasa pemrograman dart, untuk melakukan asynchronous kita menggunakan future, future sendiri ialah objek yang merepresentasikan nilai yang belum tersedia saat ini, tetapi akan tersedia di masa depan. Contoh penggunaan: Future\u003cvoid\u003e fetchData() async { print(\"Memulai fetching data...\"); await Future.delayed(Duration(seconds: 2)); // Delay selama 2 detik print(\"Data berhasil diambil!\"); } void main() { fetchData(); print(\"Eksekusi kode lainnya...\"); } ","date":"2024-04-13","objectID":"/posts/pemrograman-mobile/asynchronous-dart/:3:0","series":["pemrograman-mobile"],"tags":["Dart"],"title":"Belajar Dart: Asynchronous","uri":"/posts/pemrograman-mobile/asynchronous-dart/#asynchronous-di-dart"},{"categories":[],"content":"\rFunction pada DartFunction(fungsi) adalah blok kode yang memiliki tujuan tertentu dan dapat dipanggil (atau “dijalankan”) dari bagian lain dalam program. Function digunakan untuk mengelompokkan kode agar lebih teratur, mudah dipahami, dan dapat digunakan kembali tanpa harus menulis ulang. Dart sendiri telah memiliki function yang telah disediakan untuk menjalankan atau mengeksekusi seluruh baris kode ketika melakukan pengembangan aplikasi menggunakan Dart. Fungsi itu yaitu void main(). void main() { // baris kode program } ","date":"2024-04-12","objectID":"/posts/pemrograman-mobile/function-dart/:1:0","series":["pemrograman-mobile"],"tags":["Dart"],"title":"Belajar Dart: Function","uri":"/posts/pemrograman-mobile/function-dart/#function-pada-dart"},{"categories":[],"content":"\rStruktur Function: Sebuah function terdiri dari nama function, parameter, dan body. Nama function digunakan untuk memanggil function tersebut. Parameter(opsional) adalah nilai yang diterima oleh function saat dipanggil. Body function berisi kode yang akan dieksekusi saat function dipanggil. argument adalah nilai yang diberikan ketika fungsi di panggil. Contoh Function: // fungsi utama void main() { sum(10, 5); // argument(10, 5) } // fungsi penjumlahan int sum(int a, int b) // parameter(a, b) { return a + b; // body function } Output: 15 Penjelasan: int merupakan keyword (kata kunci) yang menandakan bahwa function ini akan mengembalikan data berjenis integer. sum merupakan nama dari function. int a dan int b yang ada di dalam tanda kurung () merupakan parameter. yang berada di dalam () ketika fungsi di panggil adalah argument, dalam contoh di atas ialah 10 dan 5. yang berada di dalam tanda {} adalah body dari function, yang dimana isi dari function tersebut ialah operasi matematika penjumlahan. ","date":"2024-04-12","objectID":"/posts/pemrograman-mobile/function-dart/:1:1","series":["pemrograman-mobile"],"tags":["Dart"],"title":"Belajar Dart: Function","uri":"/posts/pemrograman-mobile/function-dart/#struktur-function"},{"categories":[],"content":"\rFinal dan Const pada DartDalam bahasa pemrograman Dart, final dan const digunakan untuk mendeklarasikan variabel yang nilainya tidak dapat diubah setelah inisialisasi. Meskipun keduanya memiliki tujuan yang serupa, namun ada perbedaan penting antara keduanya. ","date":"2024-04-10","objectID":"/posts/pemrograman-mobile/final-const-dart/:1:0","series":["pemrograman-mobile"],"tags":["Dart"],"title":"Belajar Dart: Final \u0026 Const","uri":"/posts/pemrograman-mobile/final-const-dart/#final-dan-const-pada-dart"},{"categories":[],"content":"\rPerbedaan Utama Final Const Nilai variabel dapat ditentukan saat runtime. Nilainya harus diketahui saat kompilasi. Nilainya bisa diinisialisasi dalam constructor. Nilainya harus diinisialisasi saat deklarasi. Nilainya dapat berbeda untuk setiap instance objek. Nilainya tetap sama untuk semua instance objek. Digunakan untuk nilai yang tidak diketahui sampai runtime. Digunakan untuk nilai konstan yang diketahui pada saat kompilasi. ","date":"2024-04-10","objectID":"/posts/pemrograman-mobile/final-const-dart/:1:1","series":["pemrograman-mobile"],"tags":["Dart"],"title":"Belajar Dart: Final \u0026 Const","uri":"/posts/pemrograman-mobile/final-const-dart/#perbedaan-utama"},{"categories":[],"content":"\rContoh Penggunaan\rFinal final String babyName; babyName = \"Rando\"; babyName = \"Randi\"; // error print(babyName); Setelah Program dijalankan maka akan muncul error seperti berikut: Analogi dan Penjelasan: Bayangkan jika ada sebuah papan nama untuk anak yang baru lahir, di mana orang tua bisa menulis nama bayi mereka. Variabel babyName dalam program ini adalah seperti papan nama tersebut, di mana orang tua menulis nama pertama kali saat bayi lahir. Saat pertama kali, orang tua menulis nama \"Rando\" di papan nama tersebut (variabel babyName = “Rando”). Namun, seperti sebuah papan nama yang sudah terpasang, setelah nama tertulis di sana, kita tidak bisa mengubahnya. Jika kita mencoba menulis nama yang berbeda di papan nama yang sama, akan ada kesalahan, sama halnya dalam program saat kita mencoba mengubah nilai variabel babyName setelah inisialisasi pertama. jadi penulisan yang benar adalah seperti ini: final String babyName; babyName = \"Rando\"; print(babyName); Constconst String name; name = \"Rando\"; print(name); jika kita menuliskan seperti di atas maka akan muncul error seperti berikut ini: Penjelasan: Berbeda dengan final pada const nilai_(value)_ dari variabel yang dibuat wajib langsung di beri. Dalam contoh ini (variable name) jadi penulisan yang benar adalah seperti ini: const String name = \"Rando\"; print(name); Kesimpulan keduanya memiliki kesamaan yaitu membuat variabel tidak bisa di ubah nilai (value)-nya dikemudian hari. Namun jika kita menggunakan final kita bisa memberi nilainya nanti, sedangkan pada const nilainya wajib di beri saat pertama kali pembuatan variabel. ","date":"2024-04-10","objectID":"/posts/pemrograman-mobile/final-const-dart/:1:2","series":["pemrograman-mobile"],"tags":["Dart"],"title":"Belajar Dart: Final \u0026 Const","uri":"/posts/pemrograman-mobile/final-const-dart/#contoh-penggunaan"},{"categories":[],"content":"\rContoh Penggunaan\rFinal final String babyName; babyName = \"Rando\"; babyName = \"Randi\"; // error print(babyName); Setelah Program dijalankan maka akan muncul error seperti berikut: Analogi dan Penjelasan: Bayangkan jika ada sebuah papan nama untuk anak yang baru lahir, di mana orang tua bisa menulis nama bayi mereka. Variabel babyName dalam program ini adalah seperti papan nama tersebut, di mana orang tua menulis nama pertama kali saat bayi lahir. Saat pertama kali, orang tua menulis nama \"Rando\" di papan nama tersebut (variabel babyName = “Rando”). Namun, seperti sebuah papan nama yang sudah terpasang, setelah nama tertulis di sana, kita tidak bisa mengubahnya. Jika kita mencoba menulis nama yang berbeda di papan nama yang sama, akan ada kesalahan, sama halnya dalam program saat kita mencoba mengubah nilai variabel babyName setelah inisialisasi pertama. jadi penulisan yang benar adalah seperti ini: final String babyName; babyName = \"Rando\"; print(babyName); Constconst String name; name = \"Rando\"; print(name); jika kita menuliskan seperti di atas maka akan muncul error seperti berikut ini: Penjelasan: Berbeda dengan final pada const nilai_(value)_ dari variabel yang dibuat wajib langsung di beri. Dalam contoh ini (variable name) jadi penulisan yang benar adalah seperti ini: const String name = \"Rando\"; print(name); Kesimpulan keduanya memiliki kesamaan yaitu membuat variabel tidak bisa di ubah nilai (value)-nya dikemudian hari. Namun jika kita menggunakan final kita bisa memberi nilainya nanti, sedangkan pada const nilainya wajib di beri saat pertama kali pembuatan variabel. ","date":"2024-04-10","objectID":"/posts/pemrograman-mobile/final-const-dart/:1:2","series":["pemrograman-mobile"],"tags":["Dart"],"title":"Belajar Dart: Final \u0026 Const","uri":"/posts/pemrograman-mobile/final-const-dart/#final"},{"categories":[],"content":"\rContoh Penggunaan\rFinal final String babyName; babyName = \"Rando\"; babyName = \"Randi\"; // error print(babyName); Setelah Program dijalankan maka akan muncul error seperti berikut: Analogi dan Penjelasan: Bayangkan jika ada sebuah papan nama untuk anak yang baru lahir, di mana orang tua bisa menulis nama bayi mereka. Variabel babyName dalam program ini adalah seperti papan nama tersebut, di mana orang tua menulis nama pertama kali saat bayi lahir. Saat pertama kali, orang tua menulis nama \"Rando\" di papan nama tersebut (variabel babyName = “Rando”). Namun, seperti sebuah papan nama yang sudah terpasang, setelah nama tertulis di sana, kita tidak bisa mengubahnya. Jika kita mencoba menulis nama yang berbeda di papan nama yang sama, akan ada kesalahan, sama halnya dalam program saat kita mencoba mengubah nilai variabel babyName setelah inisialisasi pertama. jadi penulisan yang benar adalah seperti ini: final String babyName; babyName = \"Rando\"; print(babyName); Constconst String name; name = \"Rando\"; print(name); jika kita menuliskan seperti di atas maka akan muncul error seperti berikut ini: Penjelasan: Berbeda dengan final pada const nilai_(value)_ dari variabel yang dibuat wajib langsung di beri. Dalam contoh ini (variable name) jadi penulisan yang benar adalah seperti ini: const String name = \"Rando\"; print(name); Kesimpulan keduanya memiliki kesamaan yaitu membuat variabel tidak bisa di ubah nilai (value)-nya dikemudian hari. Namun jika kita menggunakan final kita bisa memberi nilainya nanti, sedangkan pada const nilainya wajib di beri saat pertama kali pembuatan variabel. ","date":"2024-04-10","objectID":"/posts/pemrograman-mobile/final-const-dart/:1:2","series":["pemrograman-mobile"],"tags":["Dart"],"title":"Belajar Dart: Final \u0026 Const","uri":"/posts/pemrograman-mobile/final-const-dart/#const"},{"categories":[],"content":"\rComments pada DartKomentar (comments) dalam bahasa pemrograman ialah sebuah baris kode yang berfungsi untuk memberikan penjelasan atau dokumentasi kode program kepada programmer, komentar tidak akan di eksekusi oleh program. Dart mendukung beberapa jenis komentar yang dapat digunakan oleh programmer untuk menambahkan catatan atau penjelasan di dalam kode. Berikut adalah jenis - jenis komentar yang dapat digunakan di Dart: ","date":"2024-04-09","objectID":"/posts/pemrograman-mobile/comments-dart/:1:0","series":["pemrograman-mobile"],"tags":["Dart"],"title":"Belajar Dart: Comments","uri":"/posts/pemrograman-mobile/comments-dart/#comments-pada-dart"},{"categories":[],"content":"\rKomentar Satu Baris (Singleline):Komentar satu baris dimulai dengan // dan berlaku untuk baris tersebut. // Ini adalah komentar satu baris var number = 42; // Komentar untuk kode ","date":"2024-04-09","objectID":"/posts/pemrograman-mobile/comments-dart/:1:1","series":["pemrograman-mobile"],"tags":["Dart"],"title":"Belajar Dart: Comments","uri":"/posts/pemrograman-mobile/comments-dart/#komentar-satu-baris-singleline"},{"categories":[],"content":"\rKomentar Multibaris (Multiline):Komentar multibaris dimulai dengan /* dan diakhiri dengan */. Komentar ini mencakup beberapa baris kode. /* Ini adalah komentar multibaris untuk beberapa baris kode */ ","date":"2024-04-09","objectID":"/posts/pemrograman-mobile/comments-dart/:1:2","series":["pemrograman-mobile"],"tags":["Dart"],"title":"Belajar Dart: Comments","uri":"/posts/pemrograman-mobile/comments-dart/#komentar-multibaris-multiline"},{"categories":[],"content":"\rKomentar Dokumentasi (Documentation):Komentar dokumentasi digunakan untuk menghasilkan dokumentasi otomatis dari kode menggunakan alat seperti Dartdoc. Komentar ini dimulai dengan /// dan berlaku untuk elemen yang berikutnya. Komentar Dokumentasi Satu Baris (Singleline-Documentation):/// Fungsi ini menjumlahkan dua bilangan int tambah(int a, int b){ return a + b; } Komentar Dokumentasi Multibaris (Multiline-Documentation):Mirip dengan komentar dokumentasi satu baris, tetapi dapat mencakup beberapa baris. /** * Kelas ini merupakan model untuk * objek mahasiswa */ class Mahasiswa { // .... } ","date":"2024-04-09","objectID":"/posts/pemrograman-mobile/comments-dart/:1:3","series":["pemrograman-mobile"],"tags":["Dart"],"title":"Belajar Dart: Comments","uri":"/posts/pemrograman-mobile/comments-dart/#komentar-dokumentasi-documentation"},{"categories":[],"content":"\rKomentar Dokumentasi (Documentation):Komentar dokumentasi digunakan untuk menghasilkan dokumentasi otomatis dari kode menggunakan alat seperti Dartdoc. Komentar ini dimulai dengan /// dan berlaku untuk elemen yang berikutnya. Komentar Dokumentasi Satu Baris (Singleline-Documentation):/// Fungsi ini menjumlahkan dua bilangan int tambah(int a, int b){ return a + b; } Komentar Dokumentasi Multibaris (Multiline-Documentation):Mirip dengan komentar dokumentasi satu baris, tetapi dapat mencakup beberapa baris. /** * Kelas ini merupakan model untuk * objek mahasiswa */ class Mahasiswa { // .... } ","date":"2024-04-09","objectID":"/posts/pemrograman-mobile/comments-dart/:1:3","series":["pemrograman-mobile"],"tags":["Dart"],"title":"Belajar Dart: Comments","uri":"/posts/pemrograman-mobile/comments-dart/#komentar-dokumentasi-satu-baris-singleline-documentation"},{"categories":[],"content":"\rKomentar Dokumentasi (Documentation):Komentar dokumentasi digunakan untuk menghasilkan dokumentasi otomatis dari kode menggunakan alat seperti Dartdoc. Komentar ini dimulai dengan /// dan berlaku untuk elemen yang berikutnya. Komentar Dokumentasi Satu Baris (Singleline-Documentation):/// Fungsi ini menjumlahkan dua bilangan int tambah(int a, int b){ return a + b; } Komentar Dokumentasi Multibaris (Multiline-Documentation):Mirip dengan komentar dokumentasi satu baris, tetapi dapat mencakup beberapa baris. /** * Kelas ini merupakan model untuk * objek mahasiswa */ class Mahasiswa { // .... } ","date":"2024-04-09","objectID":"/posts/pemrograman-mobile/comments-dart/:1:3","series":["pemrograman-mobile"],"tags":["Dart"],"title":"Belajar Dart: Comments","uri":"/posts/pemrograman-mobile/comments-dart/#komentar-dokumentasi-multibaris-multiline-documentation"},{"categories":[],"content":"\rContoh Penggunaan Komentar (comments)// Fungsi ini menghitung kuadrat dari sebuah angka int hitungKuadrat(int angka){ return angka * angka; } /* Fungsi ini mengalikan dua bilangan dan mengembalikan hasilnya */ int kali(int a, int b){ return a * b; } /// Kelas untuk merepresentasikan data mahasiswa class Mahasiswa { String nama; int usia; /// Constructor untuk membuat objek Mahasiswa Mahasiswa(this.nama, this.usia); /// Metode untuk mencetak info Mahasiswa void info(){ print('Nama: $nama, Usia: $usia tahun'); } } Komentar sangat berguna untuk menjelaskan apa yang dilakukan oleh suatu bagian kode, memberikan informasi tentang penggunaan, parameter, dan fungsi dari elemen kode tertentu. Komentar yang baik dapat membantu dalam pemahaman kode, pemeliharaan, serta pembuatan dokumentasi yang lebih baik. ","date":"2024-04-09","objectID":"/posts/pemrograman-mobile/comments-dart/:1:4","series":["pemrograman-mobile"],"tags":["Dart"],"title":"Belajar Dart: Comments","uri":"/posts/pemrograman-mobile/comments-dart/#contoh-penggunaan-komentar-comments"},{"categories":[],"content":"\rTipe Data DartTipe Data dalam pemrograman adalah cara untuk mendefinisikan jenis nilai yang dapat disimpan dalam variabel. Tipe data menentukan jenis operasi yang dapat dilakukan pada variabel tersebut, seperti operasi matematika, pembandingan, dan sebagainya. Setiap bahasa pemrograman memiliki tipe data yang berbeda - beda, tergantung pada kebutuhan dan desain bahasa tersebut. Berikut kita akan bahas apa saja tipe data yang ada di dalam bahasa pemrograman Dart beserta contoh penulisannya: ","date":"2024-04-03","objectID":"/posts/pemrograman-mobile/tipe-data-dart/:1:0","series":["pemrograman-mobile"],"tags":["Dart"],"title":"Belajar Dart: Tipe Data","uri":"/posts/pemrograman-mobile/tipe-data-dart/#tipe-data-dart"},{"categories":[],"content":"\rStringTipe data String adalah tipe data yang digunakan untuk merepresentasikan teks atau atau urutan karakter, contohnya nama, alamat email, pesan, dan banyak lagi. Penulisan String umumnya menggunakan tanda kutip satu ' atau kutip dua \" Karakteristik Tipe Data String: Immutable: Artinya setelah string dibuat, isinya tidak dapat diubah. Dapat Diindeks: Karakter dalam string dapat diakses dengan menggunakan indeks. Penulisan String di Dart// Menggunakan tanda kutip satu (') String nama = 'Afrando'; // Menggunakan tanda kutip dua (\") String alamat = \"Jl. Hajimena No. 666\"; Method pada tipe data String Dalam bahasa pemrograman Dart, terdapat beberapa method yang umum digunakan pada tipe data String. di antaranya adalah sebagai berikut: length: berfungsi mengembalikan panjang (jumlah karakter) dari string. contoh penulisan: String kata = 'Hello'; print(kata.length); Output: 5 substring(int start, [int end]): berfungsi mengambil potongan string dari indeks mulai hingga indeks akhir (opsional). contoh penulisan: String kata = 'Hello World'; print(kata.substring(6)); print(kata.substring(0, 5)); Output: World Hello isEmpty dan isNotEmpty: ialah property yang berfungsi mengembalikan true jika string kosong atau tidak kosong. contoh penulisan: String kosong = ''; String tidakKosong = 'Hello'; print(kosong.isEmpty); print(tidakKosong.isNotEmpty); Output: true true ","date":"2024-04-03","objectID":"/posts/pemrograman-mobile/tipe-data-dart/:1:1","series":["pemrograman-mobile"],"tags":["Dart"],"title":"Belajar Dart: Tipe Data","uri":"/posts/pemrograman-mobile/tipe-data-dart/#string"},{"categories":[],"content":"\rStringTipe data String adalah tipe data yang digunakan untuk merepresentasikan teks atau atau urutan karakter, contohnya nama, alamat email, pesan, dan banyak lagi. Penulisan String umumnya menggunakan tanda kutip satu ' atau kutip dua \" Karakteristik Tipe Data String: Immutable: Artinya setelah string dibuat, isinya tidak dapat diubah. Dapat Diindeks: Karakter dalam string dapat diakses dengan menggunakan indeks. Penulisan String di Dart// Menggunakan tanda kutip satu (') String nama = 'Afrando'; // Menggunakan tanda kutip dua (\") String alamat = \"Jl. Hajimena No. 666\"; Method pada tipe data String Dalam bahasa pemrograman Dart, terdapat beberapa method yang umum digunakan pada tipe data String. di antaranya adalah sebagai berikut: length: berfungsi mengembalikan panjang (jumlah karakter) dari string. contoh penulisan: String kata = 'Hello'; print(kata.length); Output: 5 substring(int start, [int end]): berfungsi mengambil potongan string dari indeks mulai hingga indeks akhir (opsional). contoh penulisan: String kata = 'Hello World'; print(kata.substring(6)); print(kata.substring(0, 5)); Output: World Hello isEmpty dan isNotEmpty: ialah property yang berfungsi mengembalikan true jika string kosong atau tidak kosong. contoh penulisan: String kosong = ''; String tidakKosong = 'Hello'; print(kosong.isEmpty); print(tidakKosong.isNotEmpty); Output: true true ","date":"2024-04-03","objectID":"/posts/pemrograman-mobile/tipe-data-dart/:1:1","series":["pemrograman-mobile"],"tags":["Dart"],"title":"Belajar Dart: Tipe Data","uri":"/posts/pemrograman-mobile/tipe-data-dart/#penulisan-string-di-dart"},{"categories":[],"content":"\rBooleanTipe data Boolean dalam Dart digunakan untuk merepresentasikan nilai kebenaran, yaitu true (benar) atau false (salah). Tipe data ini sering digunakan dalam pengkondisian dan operasi logika. Penulisan Boolean di Dart// Contoh sederhana tipe data boolean bool isRaining = true; bool isSunny = false; print('apakah sedang hujan? $isRaining'); print('apakah cerah? $isSunny'); Output: apakah sedang hujan? true apakah cerah? false Method pada tipe data Boolean Tipe data boolean di Dart memang tidak memiliki method bawaan yang spesifik karena tipe data boolean adalah tipe data sederhana yang hanya memiliki dua nilai: true dan false. ","date":"2024-04-03","objectID":"/posts/pemrograman-mobile/tipe-data-dart/:1:2","series":["pemrograman-mobile"],"tags":["Dart"],"title":"Belajar Dart: Tipe Data","uri":"/posts/pemrograman-mobile/tipe-data-dart/#boolean"},{"categories":[],"content":"\rBooleanTipe data Boolean dalam Dart digunakan untuk merepresentasikan nilai kebenaran, yaitu true (benar) atau false (salah). Tipe data ini sering digunakan dalam pengkondisian dan operasi logika. Penulisan Boolean di Dart// Contoh sederhana tipe data boolean bool isRaining = true; bool isSunny = false; print('apakah sedang hujan? $isRaining'); print('apakah cerah? $isSunny'); Output: apakah sedang hujan? true apakah cerah? false Method pada tipe data Boolean Tipe data boolean di Dart memang tidak memiliki method bawaan yang spesifik karena tipe data boolean adalah tipe data sederhana yang hanya memiliki dua nilai: true dan false. ","date":"2024-04-03","objectID":"/posts/pemrograman-mobile/tipe-data-dart/:1:2","series":["pemrograman-mobile"],"tags":["Dart"],"title":"Belajar Dart: Tipe Data","uri":"/posts/pemrograman-mobile/tipe-data-dart/#penulisan-boolean-di-dart"},{"categories":[],"content":"\rInt, Double, NumTipe data num, double dan int adalah tipe data yang digunakan untuk menyimpan nilai angka dalam Dart. Meskipun semuanya berhubungan dengan angka, ketiga tipe data tersebut memiliki perbedaan dalam rentang nilai dan perilaku. Berikut ialah penjelasan mengenai ketiganya: Perbedaan dan Perilaku: Tipe Data Perilaku Int Menyimpan bilangan bulat tanpa desimal. Cocok digunakan untuk representasi data yang pasti bilangan bulat, seperti jumlah item, indeks dalam list, atau ID. Double Menyimpan bilangan desimal, cocok digunakan untuk representasi data yang bisa memiliki desimal, seperti harga barang, koordinat dalam sistem koordinat, tau hasil perhitungan matematika. Num Tipe data yang bisa menampung keduanya, baik bilangan bulat maupun desimal. Namun perlu diingat bahwa saat menggunakan num, ada sedikit overhead karena Dart harus menentukan apakah nilai tersebut int atau double. Overhead pada penentuan apakah nilai tersebut int atau double dalam konteks tipe data num di Dart berarti ada sedikit tambahan beban (komputasi tambahan) yang terjadi. Hal ini terjadi karena tipe data num dapat mewakili baik bilangan bulat (int) maupun bilangan desimal (double) Tipe data int (Integer): int digunakan untuk menyimpan bilangan bulat (integer) tanpa desimal. Memiliki rentang nilai: -2^63 hingga 2^63 - 1. Contoh Penulisan: int myInt = 42; Method pada tipe data int: Method Kegunaan abs() Mengembalikan nilai absolute dari integer toRadixString(int radix) Mengonversi integer menjadi string dalam format radix toString() Mengonversi integer menjadi string Radix adalah basis numerik atau sistem bilangan tertentu yang digunakan untuk merepresentasikan bilangan dalam bentuk string Contoh Penggunaan method pada int: int myInt = -42; print(myInt.abs()); // Output: 42 print(myInt.toString()); // Output: -42, namun menjadi string Tipe data double double digunakan untuk menyimpan bilangan desimal (floating-point) serta merepresentasikan nilai desimal atau pecahan. Rentang nilai: sekitar ±1.7976931348623157 x 10^308. Contoh Penulisan: double myDouble = 3.14 Method pada tipe data double: Method Kegunaan abs() Mengembalikan nilai absolute dari double ceil() Membulatkan ke atas menjadi integer floor() Membulatkan ke bawah menjadi integer round() Membulatkan ke integer terdekat truncate() Membuang bagian desimal dari double Contoh Penggunaan method pada int: double myDouble = -3.14; print(myDouble.abs()); // Output: 3.14 print(myDouble.ceil()); // Output: -3 print(myDouble.floor()); // Output: -4 print(myDouble.round()); // Output: -3 print(myDouble.truncate()); // Output: -3 Tipe data num num adalah tipe data umum yang dapat menyimpan nilai bilangan bulat atau desimal. tipe data ini sering digunakan ketika ingin menyimpan nilai numerik yang bisa berupa int atau double. Rentang nilai: Sesuai dengan rentang nilai dari int dan double yang diperbolehkan. Contoh Penulisan: num myNum = 42; num myOtherNum = 3.14; Method pada tipe data num: Method Kegunaan abs() Mengembalikan nilai absolute dari num toInt() Mengonversi num menjadi integer toDouble() Mengonversi num menjadi double toString() Mengonversi num menjadi string Contoh Penggunaan method pada num: double myNum = -3.14; print(myNum.abs()); // Output: 3.14 print(myNum.toInt()); // Output: -3 print(myNum.toDouble()); // Output: -3.14 print(myNum.toString()); // Output: -3.14 ","date":"2024-04-03","objectID":"/posts/pemrograman-mobile/tipe-data-dart/:1:3","series":["pemrograman-mobile"],"tags":["Dart"],"title":"Belajar Dart: Tipe Data","uri":"/posts/pemrograman-mobile/tipe-data-dart/#int-double-num"},{"categories":[],"content":"\rListTipe data List dalam Dart digunakan untuk menyimpan kumpulan nilai atau objek dalam urutan tertentu. List mirip dengan array dalam banyak bahasa pemrograman lainnya. List dapat berisi objek dengan tipe data yang sama atau berbeda. Indeks dalam List dimulai dari 0. Contoh Penulisan: // List dengan tipe data int List\u003cint\u003e numbers = [1, 2, 3, 4, 5]; // List dengan tipe data String List\u003cString\u003e fruits = ['Apple', 'Banana', 'Orange']; // List dengan tipe data dynamic (bisa menyimpan berbagai tipe data) List\u003cdynamic\u003e mixedList = [1, 'Hello', true]; // atau dapat ditulis seperti ini: List mixedList = [1, 'Hello', true]; // Contoh cara pemanggilan print('${fruits[1]}'); // Output: Banana Method pada tipe data List: Berikut ini adalah beberapa method yang sering digunakan pada tipe data List di Dart: add(): Menambahkan elemen ke akhir List. List\u003cint\u003e numbers = [1, 2, 3]; numbers.add(4); print(numbers); // Output: [1, 2, 3, 4] addAll(): Menambahkan semua elemen dari List lain ke dalam List saat ini. List\u003cint\u003e numbers1 = [1, 2, 3]; List\u003cint\u003e numbers2 = [4, 5, 6]; numbers1.addAll(numbers2); print(numbers1); // Output: [1, 2, 3, 4, 5, 6] remove(): Menghapus elemen tertentu dari List. List\u003cint\u003e numbers = [1, 2, 3, 4, 5]; numbers.remove(3); print(numbers); // Output: [1, 2, 4, 5] length(): Mengembalikan jumlah elemen dalam List. List\u003cString\u003e fruits = ['Apple', 'Banana', 'Orange']; print(fruits.length); // Output: 3 insert(): Menyisipkan elemen pada indeks tertentu. List\u003cint\u003e numbers = [1, 2, 4, 5]; numbers.insert(2, 3); // Menyisipkan 3 pada indeks ke-2 print(numbers); // Output: [1, 2, 3, 4, 5] clear(): Menghapus semua elemen dalam List. List\u003cint\u003e numbers = [1, 2, 3, 4, 5]; numbers.clear(); print(numbers); // Output: [] contains(): Memeriksa apakah list mengandung suatu nilai. List\u003cString\u003e fruits = ['Apple', 'Banana', 'Orange']; print(fruits.contains('Banana')); // Output: true forEach(): Iterasi melalui setiap elemen dalam List. List\u003cint\u003e numbers = [1, 2, 3, 4, 5]; numbers.forEach((number) { print(number); }); // Output: // 1 // 2 // 3 // 4 // 5 sort(): Mengurutkan elemen dalam List. List\u003cint\u003e numbers = [3, 1, 4, 2, 5]; numbers.sort(); print(numbers); // Output: [1, 2, 3, 4, 5] indexOf(): Mendapatkan indeks pertama dari nilai tertentu. List\u003cString\u003e fruits = ['Apple', 'Banana', 'Orange']; print(fruits.indexOf('Banana')); // Output: 1 toList(): Mengonversi objek Iterable menjadi List. Iterable\u003cint\u003e iterableNumbers = [1, 2, 3]; List\u003cint\u003e numbersList = iterableNumbers.toList(); print(numbersList); // Output: [1, 2, 3] Iterable ialah konsep yang digunakan untuk merepresentasikan objek yang dapat diiterasi atau diulang. removeAt(): Menghapus elemen pada indeks tertentu. List\u003cint\u003e numbers = [1, 2, 3, 4, 5]; numbers.removeAt(2); // Menghapus elemen pada indeks ke-2 (nilai 3) print(numbers); // Output: [1, 2, 4, 5] ","date":"2024-04-03","objectID":"/posts/pemrograman-mobile/tipe-data-dart/:1:4","series":["pemrograman-mobile"],"tags":["Dart"],"title":"Belajar Dart: Tipe Data","uri":"/posts/pemrograman-mobile/tipe-data-dart/#list"},{"categories":[],"content":"\rMapTipe data Map dalam Dart digunakan untuk menyimpan pasangan kunci-nilai (key-value pairs). Setiap kunci dalam Map harus unik, dan kunci tersebut digunakan untuk mengakses nilainya. Map dapat berisi berbagai tipe data untuk kunci dan nilai, baik itu tipe data primitif maupun objek. Primitif \u0026 Objek\rTipe data Primitif seperti int, double, String, dan bool digunakan untuk menyimpan nilai tunggal sederhana seperti bilangan bulat, bilangan desimal, teks, dan nilai boolean. Sementara itu, tipe data Objek seperti List, Map, dan Class digunakan untuk membuat struktur data yang kompleks dengan properti dan method tambahan, disimpan sebagai referensi ke objek di memori.\rContoh Penulisan: // Map dengan kunci(key) String dan nilai(value) int Map\u003cString, int\u003e scores = { 'Coki': 100, 'Haikal': 95, 'Rando': 90, }; // Map dengan kunci int dan nilai String Map\u003cint, String\u003e students = { 1: 'Coki', 2: 'Haikal', 3: 'Rando', 4: 'Umar', }; // Map dengan tipe data dynamic untuk kunci beserta nilainya Map\u003cdynamic, dynamic\u003e data = { 'name': 'Rando', 'age': 30, 'isStudent': true, }; //Contoh cara pemanggilan print('${students[\"Coki\"]}'); // Output: 100 Method pada tipe data Map: Berikut ini adalah beberapa method yang sering digunakan pada tipe data Map di Dart: length: Mengembalikan jumlah pasangan kunci-nilai dalam Map. Map\u003cString, int\u003e scores = { 'Coki': 100, 'Haikal': 95, 'Rando': 90, }; print(scores.length); // Output: 3 keys: Mengembalikan Iterable yang berisi semua kunci dalam Map. Map\u003cString, int\u003e scores = { 'Coki': 100, 'Haikal': 95, 'Rando': 90, }; print(scores.keys); // Output: (Coki, Haikal, Rando) values: Mengembalikan Iterable yang berisi semua nilai dalam Map. Map\u003cString, int\u003e scores = { 'Coki': 100, 'Haikal': 95, 'Rando': 90, }; print(scores.values); // Output: (100, 95, 90) forEach(): Iterasi melalui setiap pasangan kunci-nilai dalam Map. Map\u003cString, int\u003e scores = { 'Coki': 100, 'Haikal': 95, 'Rando': 90, }; scores.forEach((key, value) { print('$key: $value'); }); // Output: // Coki: 100 // Haikal: 95 // Rando: 90 ","date":"2024-04-03","objectID":"/posts/pemrograman-mobile/tipe-data-dart/:1:5","series":["pemrograman-mobile"],"tags":["Dart"],"title":"Belajar Dart: Tipe Data","uri":"/posts/pemrograman-mobile/tipe-data-dart/#map"},{"categories":[],"content":"Ini merupakan series belajar dart dan flutter dengan jalur yang sangat cepat, singkat, padat dan jelas.","date":"2024-04-01","objectID":"/posts/pemrograman-mobile/pengenalan-dart-flutter/","series":["pemrograman-mobile"],"tags":["Mobile","Dart","Flutter"],"title":"Pengenalan Dart dan Flutter","uri":"/posts/pemrograman-mobile/pengenalan-dart-flutter/"},{"categories":[],"content":"\rApa itu Flutter ?Flutter merupakan sebuah tools ( Software Development Kit ) yang digunakan untuk membuat beragam aplikasi (Website, Android Mobile, iOS Apps, bahkan Desktop Apps ) hanya dengan satu basis pengkodean ( Single Code Base ). Flutter merupakan project open source yang dipelihara oleh Google sejak 2018, walaupun sudah ada versi alpha pada tahun 2017. Dan Teknologi flutter ini menggunakan bahasa pemrograman Dart yang digunakan sebagai pengganti JavaScript yang dinilai masih banyak memiliki kekurangan. ","date":"2024-04-01","objectID":"/posts/pemrograman-mobile/pengenalan-dart-flutter/:0:1","series":["pemrograman-mobile"],"tags":["Mobile","Dart","Flutter"],"title":"Pengenalan Dart dan Flutter","uri":"/posts/pemrograman-mobile/pengenalan-dart-flutter/#apa-itu-flutter-"},{"categories":[],"content":"\rDartDart merupakan bahasa pemrograman yang digunakan pada pengembangan Flutter. Oleh karena itu, materi dart ini perlu dipelajari guna menunjang keberlangsungan pembelajaran Flutter kedepannya. Untuk penulisan kode dart, kita harus menuliskannya di dalam sebuah function main() supaya baris kode dapat dijalankan. void main(){ // baris kode } ketika kita menggunakan keyword void maka secara otomatis program tidak akan mengembalikan nilai ( Return ). Jika ingin mengembalikan nilai maka kita tidak perlu menuliskan keyword void. main(){ return } Karakteristik Dart: Statically Typed Dart adalah bahasa yang Statically Typed, kita perlu mendefinisikan variabel sebelum digunakan. var word = \"Hello World!\"; print(word); Output \u003e Hello World! Type Interface Karakteristik ini dapat membuat suatu variable akan mengikuti tipe data dari valuenya. Namun, hal tersebut tidak berlaku jika kita sudah memberi tipe data pada variablenya. // variable name secara otomatis menjadi String var word = \"Hello World\"; // tidak akan berubah ke int -\u003e malah jadi error, karena type datanya sudah di definisikan terlebih dahulu dengan String String word = 10; print(name); Jika program di atas dijalankan maka akan muncul error sperti berikut ini: Output \u003e Error: A value of type 'int' can't be assigned to a variable of type 'String'. String word = 20; String Expressions Kita dapat menggunakan tanda $ untuk menampilkan suatu variable bertipe apapun ke bentuk String. Hal ini dapat kita sebut sebagai String Interpolation. var word = \"Hello World\"; String language = \"Dart\"; print(\"$word - bahasa yang digunakan : $language\"); Output \u003e Hello World - bahasa yang digunakan : Dart Object Oriented Programming Dart berfokus pada paradigma OOP ( Object Oriented Programming ) yang mana berorientasi object. Penggunaanya seperti apa ? kita akan bahas pada materi tentang OOP. ","date":"2024-04-01","objectID":"/posts/pemrograman-mobile/pengenalan-dart-flutter/:0:2","series":["pemrograman-mobile"],"tags":["Mobile","Dart","Flutter"],"title":"Pengenalan Dart dan Flutter","uri":"/posts/pemrograman-mobile/pengenalan-dart-flutter/#dart"},{"categories":[],"content":"\rDartDart merupakan bahasa pemrograman yang digunakan pada pengembangan Flutter. Oleh karena itu, materi dart ini perlu dipelajari guna menunjang keberlangsungan pembelajaran Flutter kedepannya. Untuk penulisan kode dart, kita harus menuliskannya di dalam sebuah function main() supaya baris kode dapat dijalankan. void main(){ // baris kode } ketika kita menggunakan keyword void maka secara otomatis program tidak akan mengembalikan nilai ( Return ). Jika ingin mengembalikan nilai maka kita tidak perlu menuliskan keyword void. main(){ return } Karakteristik Dart: Statically Typed Dart adalah bahasa yang Statically Typed, kita perlu mendefinisikan variabel sebelum digunakan. var word = \"Hello World!\"; print(word); Output \u003e Hello World! Type Interface Karakteristik ini dapat membuat suatu variable akan mengikuti tipe data dari valuenya. Namun, hal tersebut tidak berlaku jika kita sudah memberi tipe data pada variablenya. // variable name secara otomatis menjadi String var word = \"Hello World\"; // tidak akan berubah ke int -\u003e malah jadi error, karena type datanya sudah di definisikan terlebih dahulu dengan String String word = 10; print(name); Jika program di atas dijalankan maka akan muncul error sperti berikut ini: Output \u003e Error: A value of type 'int' can't be assigned to a variable of type 'String'. String word = 20; String Expressions Kita dapat menggunakan tanda $ untuk menampilkan suatu variable bertipe apapun ke bentuk String. Hal ini dapat kita sebut sebagai String Interpolation. var word = \"Hello World\"; String language = \"Dart\"; print(\"$word - bahasa yang digunakan : $language\"); Output \u003e Hello World - bahasa yang digunakan : Dart Object Oriented Programming Dart berfokus pada paradigma OOP ( Object Oriented Programming ) yang mana berorientasi object. Penggunaanya seperti apa ? kita akan bahas pada materi tentang OOP. ","date":"2024-04-01","objectID":"/posts/pemrograman-mobile/pengenalan-dart-flutter/:0:2","series":["pemrograman-mobile"],"tags":["Mobile","Dart","Flutter"],"title":"Pengenalan Dart dan Flutter","uri":"/posts/pemrograman-mobile/pengenalan-dart-flutter/#karakteristik-dart"},{"categories":[],"content":"Pada tutorial ke-3 sebelumnya, kita telah membuat repositori kosong, yang dimana belum terdapat apapun di sana. Pada tutorial kali ini kita akan belajar cara menyimpan perubahan revisi dengan git commit. Sekarang coba tambahkan sebuah file baru. Sebagai contoh, saya akan menambahkan tiga file HTML kosong. ","date":"2024-03-28","objectID":"/posts/git/git-commit/:0:0","series":["tutorial-git"],"tags":["Git"],"title":"Tutorial Git 03: Melakukan Simpan Perubahan Revisi dengan Git Commit","uri":"/posts/git/git-commit/#"},{"categories":[],"content":"Pada tutorial kali ini kita akan belajar cara inisialisasi proyek kita dengan Git dan cara membuat repositori baru dengan Git","date":"2024-03-27","objectID":"/posts/git/buat-repository-git/","series":["tutorial-git"],"tags":["Git"],"title":"Tutorial Git 02: Inisialisasi Git dan Cara Membuat Repositori Baru dalam Proyek","uri":"/posts/git/buat-repository-git/"},{"categories":[],"content":"Repositori(repository) atau jika diterjemahkan ke dalam bahasa indonesia artinya ialah gudang. Repositori merupakan istilah yang digunakan untuk direktori proyek yang menggunakan Git. Sebagai contoh, kita memiliki sebuah direktori dengan nama projek-01 dan di dalamnya sudah menggunakan git, maka kita sudah punya repositori bernama projek-01. ","date":"2024-03-27","objectID":"/posts/git/buat-repository-git/:0:0","series":["tutorial-git"],"tags":["Git"],"title":"Tutorial Git 02: Inisialisasi Git dan Cara Membuat Repositori Baru dalam Proyek","uri":"/posts/git/buat-repository-git/#"},{"categories":[],"content":"\rMembuat RepositoriUntuk menjadikan proyek kita sebuah repository kita perlu menginisialisasi nya terlebih dahulu dengan menggunakan perintah git init. Perintah tersebut akan membuat sebuah direktori bernama .git di dalam proyek kita. Direktori ini digunakan Git sebagai database untuk menyimpan perubahan yang kita lakukan. Perlu diingat!, jika kita menghapus direktori .git, maka seluruh rekaman atau catatan yang dilakukan oleh Git akan hilang. Berikut beberapa cara penggunaan perintah git init: Membuat direktori dan repositoriPembuatan repositori dapat dilakukan dengan perintah git init nama-dir Contoh: git init projek-00 Perintah tersebut akan membuat direktori bernama projek-00. jika direktorinya sudah ada, maka Git akan melakukan inisialisasi di dalam direktori tersebut. Membuat repositori pada direktori saat iniPerintah berikut ini akan membuat repositori pada direktori saat ini (working directory) Penjelasan: Pertama saya pindah direktori ke proyek yang akan saya jadikan repositori yakni projek-01, kemudian saya menjalankan perintah git init yang dimana perintah ini akan membuat direktori proyek menjadi sebuah repositori. Jika direktori berhasil menjadi repositori maka akan tampil nama branch (main) di sebelah kanan working directory. Hal ini bisa terjadi dikarenakan saya menggunakan terminal git bash yang ada di Visual Studio Code. ","date":"2024-03-27","objectID":"/posts/git/buat-repository-git/:1:0","series":["tutorial-git"],"tags":["Git"],"title":"Tutorial Git 02: Inisialisasi Git dan Cara Membuat Repositori Baru dalam Proyek","uri":"/posts/git/buat-repository-git/#membuat-repositori"},{"categories":[],"content":"\rMembuat RepositoriUntuk menjadikan proyek kita sebuah repository kita perlu menginisialisasi nya terlebih dahulu dengan menggunakan perintah git init. Perintah tersebut akan membuat sebuah direktori bernama .git di dalam proyek kita. Direktori ini digunakan Git sebagai database untuk menyimpan perubahan yang kita lakukan. Perlu diingat!, jika kita menghapus direktori .git, maka seluruh rekaman atau catatan yang dilakukan oleh Git akan hilang. Berikut beberapa cara penggunaan perintah git init: Membuat direktori dan repositoriPembuatan repositori dapat dilakukan dengan perintah git init nama-dir Contoh: git init projek-00 Perintah tersebut akan membuat direktori bernama projek-00. jika direktorinya sudah ada, maka Git akan melakukan inisialisasi di dalam direktori tersebut. Membuat repositori pada direktori saat iniPerintah berikut ini akan membuat repositori pada direktori saat ini (working directory) Penjelasan: Pertama saya pindah direktori ke proyek yang akan saya jadikan repositori yakni projek-01, kemudian saya menjalankan perintah git init yang dimana perintah ini akan membuat direktori proyek menjadi sebuah repositori. Jika direktori berhasil menjadi repositori maka akan tampil nama branch (main) di sebelah kanan working directory. Hal ini bisa terjadi dikarenakan saya menggunakan terminal git bash yang ada di Visual Studio Code. ","date":"2024-03-27","objectID":"/posts/git/buat-repository-git/:1:0","series":["tutorial-git"],"tags":["Git"],"title":"Tutorial Git 02: Inisialisasi Git dan Cara Membuat Repositori Baru dalam Proyek","uri":"/posts/git/buat-repository-git/#membuat-direktori-dan-repositori"},{"categories":[],"content":"\rMembuat RepositoriUntuk menjadikan proyek kita sebuah repository kita perlu menginisialisasi nya terlebih dahulu dengan menggunakan perintah git init. Perintah tersebut akan membuat sebuah direktori bernama .git di dalam proyek kita. Direktori ini digunakan Git sebagai database untuk menyimpan perubahan yang kita lakukan. Perlu diingat!, jika kita menghapus direktori .git, maka seluruh rekaman atau catatan yang dilakukan oleh Git akan hilang. Berikut beberapa cara penggunaan perintah git init: Membuat direktori dan repositoriPembuatan repositori dapat dilakukan dengan perintah git init nama-dir Contoh: git init projek-00 Perintah tersebut akan membuat direktori bernama projek-00. jika direktorinya sudah ada, maka Git akan melakukan inisialisasi di dalam direktori tersebut. Membuat repositori pada direktori saat iniPerintah berikut ini akan membuat repositori pada direktori saat ini (working directory) Penjelasan: Pertama saya pindah direktori ke proyek yang akan saya jadikan repositori yakni projek-01, kemudian saya menjalankan perintah git init yang dimana perintah ini akan membuat direktori proyek menjadi sebuah repositori. Jika direktori berhasil menjadi repositori maka akan tampil nama branch (main) di sebelah kanan working directory. Hal ini bisa terjadi dikarenakan saya menggunakan terminal git bash yang ada di Visual Studio Code. ","date":"2024-03-27","objectID":"/posts/git/buat-repository-git/:1:0","series":["tutorial-git"],"tags":["Git"],"title":"Tutorial Git 02: Inisialisasi Git dan Cara Membuat Repositori Baru dalam Proyek","uri":"/posts/git/buat-repository-git/#membuat-repositori-pada-direktori-saat-ini"},{"categories":[],"content":"Pada tutorial kali ini kita akan belajar memulai praktik installasi dan konfigurasi Git","date":"2024-03-23","objectID":"/posts/git/installasi-git/","series":["tutorial-git"],"tags":["Git"],"title":"Belajar Git 01: Installasi dan Konfigurasi Awal Git","uri":"/posts/git/installasi-git/"},{"categories":[],"content":"Sebelumnya, kita telah mengenal Git pada tulisan sebelumnya. Selanjutnya kita akan mencoba melakukan instalasi git dan melakukan konfigurasi awal git. Kita akan mencoba melakukan instalasi pada Sistem Operasi: Linux Windows ","date":"2024-03-23","objectID":"/posts/git/installasi-git/:0:0","series":["tutorial-git"],"tags":["Git"],"title":"Belajar Git 01: Installasi dan Konfigurasi Awal Git","uri":"/posts/git/installasi-git/#"},{"categories":[],"content":"\rCara Install Git di LinuxUntuk melakukan installasi Git di sistem operasi linux kita dapat menggunakan perintah apt. sudo apt install git atau sudo apt-get install git Setelah itu, kita bisa memeriksa apakah Git sudah terinstall di sistem operasi kita dengan perintah: git --version Jika program Git sudah terinstall, maka secara otomatis akan menampilkan versi dari Git tersebut. berikut versi dari git yang telah terinstall di sistem operasi Ubuntu milik saya: ","date":"2024-03-23","objectID":"/posts/git/installasi-git/:1:0","series":["tutorial-git"],"tags":["Git"],"title":"Belajar Git 01: Installasi dan Konfigurasi Awal Git","uri":"/posts/git/installasi-git/#cara-install-git-di-linux"},{"categories":[],"content":"\rCara Install Git di WindowsUntuk tata cara instalasi Git di windows caranya memang berbeda dan tidak se-simple di Linux yang ketik perintah langsung terinstal. Namun tenang saja, kita akan coba lakukan dari awal hingga akhir secara runtut dan lengkap. Kita harus men-download terlebih dahulu program Git-nya. Kemudian melakukan ritual next \u003e next \u003e finish. Tapi dalam ritual tersebut, terdapat pilihan yang harus di atur agar perintah git dapat dikenali di CMD. Download GitUntuk men-download program Git, kalian bisa buka website resmi Git ( git-scm.com ). Kemudian download Git sesuai dengan arsitektur komputer kalian, semisal jika menggunakan 64bit, maka download yang 64bit. Begitu juga kalau menggunakan 32bit. Langkah - langkah install Git di WindowsLangsung saja kita mulai praktik instalasi Gitnya. Silakan klik 2x file installer Git yang telah di download. Maka akan muncul tampilan informasi dari lisensi Git, klik Next untuk melanjutkan. Selanjutnya ialah menentukan lokasi instalasi. Biarkan saja apa adanya, kemudian klik Next. Selanjutnya pemilihan komponen, biarkan saja seperti ini kemudian klik Next. Selanjutnya pemilihan direktori start menu, klik klik Next. Selanjutnya pemilihan default editor yang akan digunakan untuk Git, disini saya memilih visual studio code. Setelah itu klik Next. Selanjutnya adalah pemilihan branch initial git di repositori baru, kita pilih yang paling atas saja, kemudian klik Next. Selanjutnya pengaturan PATH Environment. Pilih yang tengah “Git from the command line and also from 3rd-party software” agar perintah git dapat dikenali di Command Prompt(CMD). kemudian klik Next. Setelah itu akan muncul pemilihan Eksekusi SSH pilih saja yang paling atas, lalu klik Next. Selanjutnya ialah memilih line ending conversions pilih saja yang paling atas, kemudian klik Next. Selanjutnya pemilihan emulator terminal. Pilih saja yang bawah, kemudian klik Next. Selanjutnya ialah pemilihan git pull, pilih saja yang Fast-forward or merge lalu klik Next. Selanjutnya pemilihan credential helper, pilih yang paling atas kemudian kllik Next. Selanjutnya adalah konfigurasi pengaturan tambahan, pilih saja “Enable file system caching”. lalu klik Next. Akhirnya sampailah kita pada akhir dari ritual ini, disini kalian bisa langsung klik Install. Tunggu beberapa saat proses instalasi sedang dilakukan. Setelah selesai, kita bisa langsung klik Finish. Selamat, Git sudah terinstal di Windows. Untuk memeriksanya, silakan buka CMD atau PowerShell, kemudian ketik perintah git --version. ","date":"2024-03-23","objectID":"/posts/git/installasi-git/:2:0","series":["tutorial-git"],"tags":["Git"],"title":"Belajar Git 01: Installasi dan Konfigurasi Awal Git","uri":"/posts/git/installasi-git/#cara-install-git-di-windows"},{"categories":[],"content":"\rCara Install Git di WindowsUntuk tata cara instalasi Git di windows caranya memang berbeda dan tidak se-simple di Linux yang ketik perintah langsung terinstal. Namun tenang saja, kita akan coba lakukan dari awal hingga akhir secara runtut dan lengkap. Kita harus men-download terlebih dahulu program Git-nya. Kemudian melakukan ritual next \u003e next \u003e finish. Tapi dalam ritual tersebut, terdapat pilihan yang harus di atur agar perintah git dapat dikenali di CMD. Download GitUntuk men-download program Git, kalian bisa buka website resmi Git ( git-scm.com ). Kemudian download Git sesuai dengan arsitektur komputer kalian, semisal jika menggunakan 64bit, maka download yang 64bit. Begitu juga kalau menggunakan 32bit. Langkah - langkah install Git di WindowsLangsung saja kita mulai praktik instalasi Gitnya. Silakan klik 2x file installer Git yang telah di download. Maka akan muncul tampilan informasi dari lisensi Git, klik Next untuk melanjutkan. Selanjutnya ialah menentukan lokasi instalasi. Biarkan saja apa adanya, kemudian klik Next. Selanjutnya pemilihan komponen, biarkan saja seperti ini kemudian klik Next. Selanjutnya pemilihan direktori start menu, klik klik Next. Selanjutnya pemilihan default editor yang akan digunakan untuk Git, disini saya memilih visual studio code. Setelah itu klik Next. Selanjutnya adalah pemilihan branch initial git di repositori baru, kita pilih yang paling atas saja, kemudian klik Next. Selanjutnya pengaturan PATH Environment. Pilih yang tengah “Git from the command line and also from 3rd-party software” agar perintah git dapat dikenali di Command Prompt(CMD). kemudian klik Next. Setelah itu akan muncul pemilihan Eksekusi SSH pilih saja yang paling atas, lalu klik Next. Selanjutnya ialah memilih line ending conversions pilih saja yang paling atas, kemudian klik Next. Selanjutnya pemilihan emulator terminal. Pilih saja yang bawah, kemudian klik Next. Selanjutnya ialah pemilihan git pull, pilih saja yang Fast-forward or merge lalu klik Next. Selanjutnya pemilihan credential helper, pilih yang paling atas kemudian kllik Next. Selanjutnya adalah konfigurasi pengaturan tambahan, pilih saja “Enable file system caching”. lalu klik Next. Akhirnya sampailah kita pada akhir dari ritual ini, disini kalian bisa langsung klik Install. Tunggu beberapa saat proses instalasi sedang dilakukan. Setelah selesai, kita bisa langsung klik Finish. Selamat, Git sudah terinstal di Windows. Untuk memeriksanya, silakan buka CMD atau PowerShell, kemudian ketik perintah git --version. ","date":"2024-03-23","objectID":"/posts/git/installasi-git/:2:0","series":["tutorial-git"],"tags":["Git"],"title":"Belajar Git 01: Installasi dan Konfigurasi Awal Git","uri":"/posts/git/installasi-git/#download-git"},{"categories":[],"content":"\rCara Install Git di WindowsUntuk tata cara instalasi Git di windows caranya memang berbeda dan tidak se-simple di Linux yang ketik perintah langsung terinstal. Namun tenang saja, kita akan coba lakukan dari awal hingga akhir secara runtut dan lengkap. Kita harus men-download terlebih dahulu program Git-nya. Kemudian melakukan ritual next \u003e next \u003e finish. Tapi dalam ritual tersebut, terdapat pilihan yang harus di atur agar perintah git dapat dikenali di CMD. Download GitUntuk men-download program Git, kalian bisa buka website resmi Git ( git-scm.com ). Kemudian download Git sesuai dengan arsitektur komputer kalian, semisal jika menggunakan 64bit, maka download yang 64bit. Begitu juga kalau menggunakan 32bit. Langkah - langkah install Git di WindowsLangsung saja kita mulai praktik instalasi Gitnya. Silakan klik 2x file installer Git yang telah di download. Maka akan muncul tampilan informasi dari lisensi Git, klik Next untuk melanjutkan. Selanjutnya ialah menentukan lokasi instalasi. Biarkan saja apa adanya, kemudian klik Next. Selanjutnya pemilihan komponen, biarkan saja seperti ini kemudian klik Next. Selanjutnya pemilihan direktori start menu, klik klik Next. Selanjutnya pemilihan default editor yang akan digunakan untuk Git, disini saya memilih visual studio code. Setelah itu klik Next. Selanjutnya adalah pemilihan branch initial git di repositori baru, kita pilih yang paling atas saja, kemudian klik Next. Selanjutnya pengaturan PATH Environment. Pilih yang tengah “Git from the command line and also from 3rd-party software” agar perintah git dapat dikenali di Command Prompt(CMD). kemudian klik Next. Setelah itu akan muncul pemilihan Eksekusi SSH pilih saja yang paling atas, lalu klik Next. Selanjutnya ialah memilih line ending conversions pilih saja yang paling atas, kemudian klik Next. Selanjutnya pemilihan emulator terminal. Pilih saja yang bawah, kemudian klik Next. Selanjutnya ialah pemilihan git pull, pilih saja yang Fast-forward or merge lalu klik Next. Selanjutnya pemilihan credential helper, pilih yang paling atas kemudian kllik Next. Selanjutnya adalah konfigurasi pengaturan tambahan, pilih saja “Enable file system caching”. lalu klik Next. Akhirnya sampailah kita pada akhir dari ritual ini, disini kalian bisa langsung klik Install. Tunggu beberapa saat proses instalasi sedang dilakukan. Setelah selesai, kita bisa langsung klik Finish. Selamat, Git sudah terinstal di Windows. Untuk memeriksanya, silakan buka CMD atau PowerShell, kemudian ketik perintah git --version. ","date":"2024-03-23","objectID":"/posts/git/installasi-git/:2:0","series":["tutorial-git"],"tags":["Git"],"title":"Belajar Git 01: Installasi dan Konfigurasi Awal Git","uri":"/posts/git/installasi-git/#langkah---langkah-install-git-di-windows"},{"categories":[],"content":"\rKonfigurasi Awal yang Harus DilakukanTerdapat beberapa konfigurasi yang harus kita lakukan sebelum memulai menggunakan Git, diantaranya ialah menentukan name dan email. Silakan lakukan konfigurasi dengan perintah berikut ini: git config --global user.name \"Afrando Sharein Ramadhan\" git config --global user.email afrandormd@gmail.com Kalian bisa sesuaikan untuk user.name dan user.email dengan yang kalian punya. Kemudian peiksa konfigurasinya dengan perintah: git config --list Apabila konfigurasi berhasil maka akan tampil seperti gambar berikut ini. Konfigurasi core.editor sifatnya opsional. Sedangkan name dan email wajib. Jika kalian memiliki akun Github, Gitlab, Bitbucket atau yang lainnya… maka username dan email harus mengikuti akun tersebut agar mudah diintegrasikan. ","date":"2024-03-23","objectID":"/posts/git/installasi-git/:3:0","series":["tutorial-git"],"tags":["Git"],"title":"Belajar Git 01: Installasi dan Konfigurasi Awal Git","uri":"/posts/git/installasi-git/#konfigurasi-awal-yang-harus-dilakukan"},{"categories":[],"content":"\rKonfigurasi Default Branch MainSecara default, repository Git akan menggunakan nama branch master ketika kita baru pertama membuat repository. Nama ini sebenarnya mulai ditinggalkan dan disarankan untuk memakai nama main. Dikarenakan di Github, default branch atau branch utama yang digunakan adalah main. Ketika kita ingin upload repo ke Github, nantinya kita akan diminta untuk mengubah branch master menjadi main. Supaya tidak repot, kita akan setup dari awal. Lalu gimana caranya supaya Git otomatis menggunakan branch main secara default? Mudah saja, cukup tambahkan konfigurasi di bawah ini. Silakan ketik di Terminal atau CMD: git config --global init.defaultBranch main Dengan begitu, Git akan secara otomatis menggunakan nama main sebagai branch utama. ","date":"2024-03-23","objectID":"/posts/git/installasi-git/:4:0","series":["tutorial-git"],"tags":["Git"],"title":"Belajar Git 01: Installasi dan Konfigurasi Awal Git","uri":"/posts/git/installasi-git/#konfigurasi-default-branch-main"},{"categories":[],"content":"Git merupakan salah satu version control system yang dimana tools ini sangat diperlukan untuk melakukan tracking perubahan source code dan melakukan kolaborasi antar sesama programmer.","date":"2024-03-17","objectID":"/posts/git/apa-itu-git/","series":["tutorial-git"],"tags":["Git"],"title":"Apa Itu Git dan Seberapa Penting Bagi Programmer?","uri":"/posts/git/apa-itu-git/"},{"categories":[],"content":"\rApa Itu Git dan Seberapa Penting Bagi Programmer?Jika kalian baru memasuki dunia pemrograman, kalian mungkin sering mendengar tentang “Git”. Apa sih sebenarnya Git itu? Mengapa hal itu begitu penting bagi para programmer? di series kali ini kita akan jelajahi Git bersama ","date":"2024-03-17","objectID":"/posts/git/apa-itu-git/:0:0","series":["tutorial-git"],"tags":["Git"],"title":"Apa Itu Git dan Seberapa Penting Bagi Programmer?","uri":"/posts/git/apa-itu-git/#apa-itu-git-dan-seberapa-penting-bagi-programmer"},{"categories":[],"content":"\rApa Itu Git?Git adalah sebuah sistem kontrol versi VCS(Version Control System) yang sangat populer di kalangan para pengembang perangkat lunak. Tapi tunggu dulu, apa itu “sistem kontrol versi”?. Bayangkan kalian sedang membuat proyek besar, seperti sebuah aplikasi atau website. Ketika kalian bekerja pada proyek tersebut, kalian pasti akan membuat banyak perubahan pada berkas - berkasnya. Nah, Git membantu kalian untuk melacak semua perubahan ini. ","date":"2024-03-17","objectID":"/posts/git/apa-itu-git/:1:0","series":["tutorial-git"],"tags":["Git"],"title":"Apa Itu Git dan Seberapa Penting Bagi Programmer?","uri":"/posts/git/apa-itu-git/#apa-itu-git"},{"categories":[],"content":"\rSejarah Singkat GitGit diciptakan oleh Linus Torvalds beliau adalah orang yang sama yang juga menciptakan kernel Linux. Pada tahun 2005, Linus sedang bekerja pada proyek Linux kernel yang semakin berkembang. Pada saat itu, sistem kontrol versi yang mereka gunakan, yang disebut BitKeeper menjadi tidak gratis lagi untuk proyek open source. Ketika BitKeeper tidak lagi tersedia secara gratis, Linus merasa perlu untuk menciptakan alternatif yang lebih baik. Pada April 2005, Linus mengumumkan proyek baru yang dia beri nama “Git”. Nama ini sebenarnya merujuk pada istilah Inggris slang yang berarti “kepala yang tolol”, mungkin merujuk pada pengalaman Linus dengan BitKeeper yang tidak memuaskan. Dalam beberapa tahun setelah diluncurkan, Git menjadi sangat populer di kalangan pengembang perangkat lunak. Kecepatan, kemampuan untuk menangani proyek - proyek besar, serta fitur - fitur canggih seperti (branching) dan penyatuan (merging), semuanya berkontribusi pada kepopuleran Git. Saat ini, Git telah menjadi standar de facto dalam pengembangan perangkat lunak. Pemahaman tentang Git tidak hanya menjadi keharusan untuk programmer, tetapi juga merupakan keterampilan yang sangat dihargai di pasar kerja teknologi saat ini. Apa Itu Standar De Facto\rStandar de facto adalah sebuah istilah yang digunakan untuk merujuk pada situasi di mana suatu teknologi atau metode menjadi standar yang diterima secara luas karena popularitas dan adopsi oleh pengguna, bukan karena keputusan formal atau regulasi resmi.\r","date":"2024-03-17","objectID":"/posts/git/apa-itu-git/:2:0","series":["tutorial-git"],"tags":["Git"],"title":"Apa Itu Git dan Seberapa Penting Bagi Programmer?","uri":"/posts/git/apa-itu-git/#sejarah-singkat-git"},{"categories":[],"content":"\rBagaimana Git Bekerja?Mari kita gunakan analogi sederhana. Bayangkan Git sebagai seorang fotografer yang mengambil gambar pada setiap langkah perubahan proyek kalian. Setiap kali kalian menyimpan perubahan, Git membuat “snapshot” dari proyek kalian pada saat itu. Jadi, jika suatu saat kalian perlu kembali ke salah satu snapshot tersebut, Git akan membantu kalian. ","date":"2024-03-17","objectID":"/posts/git/apa-itu-git/:3:0","series":["tutorial-git"],"tags":["Git"],"title":"Apa Itu Git dan Seberapa Penting Bagi Programmer?","uri":"/posts/git/apa-itu-git/#bagaimana-git-bekerja"},{"categories":[],"content":"\rSeberapa Penting Git Bagi Programmer?Sekarang pertanyaannya, mengapa Git begitu penting bagi programmer? Melacak Perubahan: Git memungkinkan programmer untuk melacak setiap perubahan yang dibuat pada kode mereka. Ini membantu dalam mengelola proyek-proyek besar dengan tim yang terdiri dari beberapa orang. Kolaborasi Tim: Dalam sebuah tim pengembangan, beberapa orang bisa bekerja pada proyek yang sama. Git memungkinkan semua orang untuk bekerja pada versi proyek yang sama, tanpa khawatir menghancurkan pekerjaan orang lain. Kembali ke Versi Lama: Seperti yang disebutkan sebelumnya, Git memungkinkan kalian untuk kembali ke versi kode yang lebih lama. Jika terjadi kesalahan atau fitur yang tidak diinginkan, kalian bisa dengan mudah “kembali dalam waktu” ke versi yang benar. Cabang (Branch): Git memungkinkan kalian untuk membuat cabang dari proyek kalian. Ini seperti membuat salinan proyek yang bisa kalian ubah tanpa mempengaruhi proyek utama. Misalnya, kalian ingin mencoba fitur baru tanpa mengubah kode utama, kalian bisa membuat cabang untuk fitur tersebut. Open Source: Banyak proyek open source menggunakan Git. Jadi, jika kalian ingin berkontribusi pada proyek open source, penting untuk memahami Git. Jadi, bagi seorang programmer, Git bukan hanya alat, tapi juga keterampilan yang sangat penting. Belajar Git akan membuka banyak pintu dalam dunia pengembangan perangkat lunak, membantu kalian bekerja dengan tim, mengelola proyek dengan lebih baik, dan menjadi kontributor yang lebih baik dalam komunitas pengembang. ","date":"2024-03-17","objectID":"/posts/git/apa-itu-git/:4:0","series":["tutorial-git"],"tags":["Git"],"title":"Apa Itu Git dan Seberapa Penting Bagi Programmer?","uri":"/posts/git/apa-itu-git/#seberapa-penting-git-bagi-programmer"},{"categories":[],"content":"Python adalah bahasa tingkat tinggi untuk backend, machine learning, AI, Dekstop, IoT, dll.","date":"2024-03-13","objectID":"/posts/python/mengenal-bahasa-python/","series":["dasar-pemrograman-python"],"tags":["Python"],"title":"Mengenal Bahasa Pemrograman Python","uri":"/posts/python/mengenal-bahasa-python/"},{"categories":[],"content":"\rSejarah Singkat PythonPython adalah bahasa pemrograman tingkat tinggi yang sering digunakan untuk pengembangan web, analisis data, data science, kecerdasan buatan (AI), dan berbagai aplikasi lainnya. Diciptakan oleh Guido van Rossum dan pertama kali dirilis pada tahun 1991, Python dirancang dengan fokus pada keterbacaan kode dan kesederhanaan sintaks. Nama “Python” terinspirasi dari acara komedi televisi BBC yang bernama “Monty Python’s Flying Circus”, bukan dari ular seperti banyak orang yang mengira. ","date":"2024-03-13","objectID":"/posts/python/mengenal-bahasa-python/:1:0","series":["dasar-pemrograman-python"],"tags":["Python"],"title":"Mengenal Bahasa Pemrograman Python","uri":"/posts/python/mengenal-bahasa-python/#sejarah-singkat-python"},{"categories":[],"content":"\rMengapa Python PopulerPenyebab kepopuleran python diantaranya ialah meningkatnya minat masyarakat dunia terhadap data science. Python merupakan salah satu bahasa pemrograman yang cocok untuk scripting dan bisa berjalan dalam berbagai platform OS dan IoT. Meskipun tergolong sebagai high level programming language, python sangat mudah dimengerti karena syntax-nya sederhana yang bahkan penulisannya sangat mirip dengan bahasa inggris. Selain itu, python dapat digunakan dalam paradigma pemrograman fungsional dan berorientasi object (OOP - Object Oriented Programming). Beberapa hal yang menjadi kelebihan dari python: Python dirancang untuk mudah di tulis dan dibaca. Python menggunakan baris baru untuk mengakhiri perintah, tidak seperti bahasa pemrograman pada umumnya yang menggunakan titik koma atau tanda kurung. Python bergantung pada indentasi, menggunakan spasi, untuk mendefinisikan ruang lingkup; seperti lingkup loop, fungsi, dan kelas. Sumber belajar online yang sangat banyak, gratis, dan mudah di akses. ","date":"2024-03-13","objectID":"/posts/python/mengenal-bahasa-python/:2:0","series":["dasar-pemrograman-python"],"tags":["Python"],"title":"Mengenal Bahasa Pemrograman Python","uri":"/posts/python/mengenal-bahasa-python/#mengapa-python-populer"},{"categories":[],"content":"\rCara Python BekerjaPython adalah bahasa pemrograman yang diinterpretasi, artinya kode Python dieksekusi baris per baris oleh interpreter. Ini berbeda dengan bahasa pemrograman yang dikompilasi, di mana kode harus dikompilasi menjadi bahasa mesin sebelum dieksekusi. Interpreter Python tersedia untuk berbagai platform seperti Windows, macOS, dan Linux, membuatnya sangat portabel. Untuk menjalankan program Python, kalian memerlukan interpreter Python yang dapat diunduh dari situs resmi Python (https://www.python.org/). Setelah diinstal, kalian dapat menjalankan skrip Python dengan mengetikkan python nama_file.py di terminal atau command prompt. Langkah - langkah pembuatan program python Membuat skrip python dengan teks editor Skrip python diterjemahkan ke dalam kode biner oleh (intepreter) python, sehingga komputer/Laptop dapat mengerti arti perintah tersebut. Komputer/Laptop mengerjakan perintah tersebut. Contoh cara menjalankan script python di terminal: $ python hello_world.py Keterangan Keyword python digunakan untuk menjalankan intrepreter dari python. hello_world.py merupakan nama file yang akan dijalankan. ","date":"2024-03-13","objectID":"/posts/python/mengenal-bahasa-python/:3:0","series":["dasar-pemrograman-python"],"tags":["Python"],"title":"Mengenal Bahasa Pemrograman Python","uri":"/posts/python/mengenal-bahasa-python/#cara-python-bekerja"},{"categories":[],"content":"\rCara Python BekerjaPython adalah bahasa pemrograman yang diinterpretasi, artinya kode Python dieksekusi baris per baris oleh interpreter. Ini berbeda dengan bahasa pemrograman yang dikompilasi, di mana kode harus dikompilasi menjadi bahasa mesin sebelum dieksekusi. Interpreter Python tersedia untuk berbagai platform seperti Windows, macOS, dan Linux, membuatnya sangat portabel. Untuk menjalankan program Python, kalian memerlukan interpreter Python yang dapat diunduh dari situs resmi Python (https://www.python.org/). Setelah diinstal, kalian dapat menjalankan skrip Python dengan mengetikkan python nama_file.py di terminal atau command prompt. Langkah - langkah pembuatan program python Membuat skrip python dengan teks editor Skrip python diterjemahkan ke dalam kode biner oleh (intepreter) python, sehingga komputer/Laptop dapat mengerti arti perintah tersebut. Komputer/Laptop mengerjakan perintah tersebut. Contoh cara menjalankan script python di terminal: $ python hello_world.py Keterangan Keyword python digunakan untuk menjalankan intrepreter dari python. hello_world.py merupakan nama file yang akan dijalankan. ","date":"2024-03-13","objectID":"/posts/python/mengenal-bahasa-python/:3:0","series":["dasar-pemrograman-python"],"tags":["Python"],"title":"Mengenal Bahasa Pemrograman Python","uri":"/posts/python/mengenal-bahasa-python/#langkah---langkah-pembuatan-program-python"},{"categories":[],"content":"\rHubungan python dengan Data Science?Pada penjelasan sebelumnya, telah disinggung bahwa python kerap sekali digunakan dalam bidang Data Science. lalu apa sih “kaitannya antara python dan Data Science?”. Jadi, python merupakan bahasa yang ditujukan untuk general-purpose programming, jenis high-level programming language dan berlisensi open source. Karena tiga karakteristik itulah, banyak pengembang membuat library python yang ditujukan untuk data science dan tentunya memudahkan pengguna dalam melakukan analisis dan membuat model prediktif dalam data science. ","date":"2024-03-13","objectID":"/posts/python/mengenal-bahasa-python/:4:0","series":["dasar-pemrograman-python"],"tags":["Python"],"title":"Mengenal Bahasa Pemrograman Python","uri":"/posts/python/mengenal-bahasa-python/#hubungan-python-dengan-data-science"},{"categories":null,"content":"\r","date":"2024-03-12","objectID":"/proj/sinau-geometry/:0:0","series":null,"tags":null,"title":"Sinau Geometry","uri":"/proj/sinau-geometry/#"},{"categories":null,"content":"\rSinau Geometry - Aplikasi Pembelajaran Bangun Ruang Berbasis Augmented RealitySinau Geometry adalah aplikasi pembelajaran bangun ruang yang menggunakan teknologi augmented reality (AR) untuk memberikan pengalaman belajar yang interaktif dan menyenangkan bagi anak-anak SD hingga SMP. Nama Sinau Geometry diambil dari kata Sinau yang berasal dari bahasa jawa yang berarti Belajar, dan kata Geometry dari bahasa inggris, yang berarti Bangun Ruang. Aplikasi ini berfokus pada konsep bangun ruang, memungkinkan pengguna untuk memahami konsep-konsep matematika secara visual dan praktis. Aplikasi ini merupakan hasil kerjasama tim yang terdiri dari saya dan rekan-rekan. Adapun posisi saya yaitu sebagai project manager, yang dimana bertugas mengelola dan mengembangkan aplikasi sinau geometry. Kami menggabungkan keahlian kami dalam desain UI/UX, pengembangan aplikasi, dan edukasi untuk menciptakan solusi edukasi yang inovatif dan bermanfaat bagi generasi muda. Fitur Utama Scan Gambar Menjadi Objek 3D: Pengguna dapat memindai gambar bangun ruang yang disediakan dalam buku atau kertas, dan aplikasi akan merubahnya menjadi objek 3D yang interaktif. Rumus Bangun Ruang: Sinau Geometry menyediakan rumus-rumus lengkap untuk berbagai bangun ruang seperti kubus, balok, prisma, dan lainnya. Penghargaan Lomba:Sinau Geometry meraih juara 1 dalam lomba expo 2024 Universitas Teknokrat Indonesia, menghadirkan aplikasi yang menjadi sorotan dan memenangkan penghargaan untuk kontribusi inovatif dalam pendidikan matematika. Testimoni:“Fitur scan gambar menjadi objek 3D sangat menarik dan membantu anak-anak kami memahami konsep bangun ruang dengan lebih mudah.” - Ibu Ani, Guru Matematika “Kami bangga bisa menjadi bagian dari proyek Sinau Geometry yang berhasil meraih juara 1 dalam lomba academic expo 2024 Universitas Teknokrat Indonesia.” - Tim BBC Demo dan Presentasi: Demo Aplikasi (coming soon) Presentasi Expo 2024 (coming soon) ","date":"2024-03-12","objectID":"/proj/sinau-geometry/:0:1","series":null,"tags":null,"title":"Sinau Geometry","uri":"/proj/sinau-geometry/#sinau-geometry---aplikasi-pembelajaran-bangun-ruang-berbasis-augmented-reality"},{"categories":null,"content":"\rSinau Geometry - Aplikasi Pembelajaran Bangun Ruang Berbasis Augmented RealitySinau Geometry adalah aplikasi pembelajaran bangun ruang yang menggunakan teknologi augmented reality (AR) untuk memberikan pengalaman belajar yang interaktif dan menyenangkan bagi anak-anak SD hingga SMP. Nama Sinau Geometry diambil dari kata Sinau yang berasal dari bahasa jawa yang berarti Belajar, dan kata Geometry dari bahasa inggris, yang berarti Bangun Ruang. Aplikasi ini berfokus pada konsep bangun ruang, memungkinkan pengguna untuk memahami konsep-konsep matematika secara visual dan praktis. Aplikasi ini merupakan hasil kerjasama tim yang terdiri dari saya dan rekan-rekan. Adapun posisi saya yaitu sebagai project manager, yang dimana bertugas mengelola dan mengembangkan aplikasi sinau geometry. Kami menggabungkan keahlian kami dalam desain UI/UX, pengembangan aplikasi, dan edukasi untuk menciptakan solusi edukasi yang inovatif dan bermanfaat bagi generasi muda. Fitur Utama Scan Gambar Menjadi Objek 3D: Pengguna dapat memindai gambar bangun ruang yang disediakan dalam buku atau kertas, dan aplikasi akan merubahnya menjadi objek 3D yang interaktif. Rumus Bangun Ruang: Sinau Geometry menyediakan rumus-rumus lengkap untuk berbagai bangun ruang seperti kubus, balok, prisma, dan lainnya. Penghargaan Lomba:Sinau Geometry meraih juara 1 dalam lomba expo 2024 Universitas Teknokrat Indonesia, menghadirkan aplikasi yang menjadi sorotan dan memenangkan penghargaan untuk kontribusi inovatif dalam pendidikan matematika. Testimoni:“Fitur scan gambar menjadi objek 3D sangat menarik dan membantu anak-anak kami memahami konsep bangun ruang dengan lebih mudah.” - Ibu Ani, Guru Matematika “Kami bangga bisa menjadi bagian dari proyek Sinau Geometry yang berhasil meraih juara 1 dalam lomba academic expo 2024 Universitas Teknokrat Indonesia.” - Tim BBC Demo dan Presentasi: Demo Aplikasi (coming soon) Presentasi Expo 2024 (coming soon) ","date":"2024-03-12","objectID":"/proj/sinau-geometry/:0:1","series":null,"tags":null,"title":"Sinau Geometry","uri":"/proj/sinau-geometry/#fitur-utama"},{"categories":null,"content":"\rSinau Geometry - Aplikasi Pembelajaran Bangun Ruang Berbasis Augmented RealitySinau Geometry adalah aplikasi pembelajaran bangun ruang yang menggunakan teknologi augmented reality (AR) untuk memberikan pengalaman belajar yang interaktif dan menyenangkan bagi anak-anak SD hingga SMP. Nama Sinau Geometry diambil dari kata Sinau yang berasal dari bahasa jawa yang berarti Belajar, dan kata Geometry dari bahasa inggris, yang berarti Bangun Ruang. Aplikasi ini berfokus pada konsep bangun ruang, memungkinkan pengguna untuk memahami konsep-konsep matematika secara visual dan praktis. Aplikasi ini merupakan hasil kerjasama tim yang terdiri dari saya dan rekan-rekan. Adapun posisi saya yaitu sebagai project manager, yang dimana bertugas mengelola dan mengembangkan aplikasi sinau geometry. Kami menggabungkan keahlian kami dalam desain UI/UX, pengembangan aplikasi, dan edukasi untuk menciptakan solusi edukasi yang inovatif dan bermanfaat bagi generasi muda. Fitur Utama Scan Gambar Menjadi Objek 3D: Pengguna dapat memindai gambar bangun ruang yang disediakan dalam buku atau kertas, dan aplikasi akan merubahnya menjadi objek 3D yang interaktif. Rumus Bangun Ruang: Sinau Geometry menyediakan rumus-rumus lengkap untuk berbagai bangun ruang seperti kubus, balok, prisma, dan lainnya. Penghargaan Lomba:Sinau Geometry meraih juara 1 dalam lomba expo 2024 Universitas Teknokrat Indonesia, menghadirkan aplikasi yang menjadi sorotan dan memenangkan penghargaan untuk kontribusi inovatif dalam pendidikan matematika. Testimoni:“Fitur scan gambar menjadi objek 3D sangat menarik dan membantu anak-anak kami memahami konsep bangun ruang dengan lebih mudah.” - Ibu Ani, Guru Matematika “Kami bangga bisa menjadi bagian dari proyek Sinau Geometry yang berhasil meraih juara 1 dalam lomba academic expo 2024 Universitas Teknokrat Indonesia.” - Tim BBC Demo dan Presentasi: Demo Aplikasi (coming soon) Presentasi Expo 2024 (coming soon) ","date":"2024-03-12","objectID":"/proj/sinau-geometry/:0:1","series":null,"tags":null,"title":"Sinau Geometry","uri":"/proj/sinau-geometry/#penghargaan-lomba"},{"categories":null,"content":"\rSinau Geometry - Aplikasi Pembelajaran Bangun Ruang Berbasis Augmented RealitySinau Geometry adalah aplikasi pembelajaran bangun ruang yang menggunakan teknologi augmented reality (AR) untuk memberikan pengalaman belajar yang interaktif dan menyenangkan bagi anak-anak SD hingga SMP. Nama Sinau Geometry diambil dari kata Sinau yang berasal dari bahasa jawa yang berarti Belajar, dan kata Geometry dari bahasa inggris, yang berarti Bangun Ruang. Aplikasi ini berfokus pada konsep bangun ruang, memungkinkan pengguna untuk memahami konsep-konsep matematika secara visual dan praktis. Aplikasi ini merupakan hasil kerjasama tim yang terdiri dari saya dan rekan-rekan. Adapun posisi saya yaitu sebagai project manager, yang dimana bertugas mengelola dan mengembangkan aplikasi sinau geometry. Kami menggabungkan keahlian kami dalam desain UI/UX, pengembangan aplikasi, dan edukasi untuk menciptakan solusi edukasi yang inovatif dan bermanfaat bagi generasi muda. Fitur Utama Scan Gambar Menjadi Objek 3D: Pengguna dapat memindai gambar bangun ruang yang disediakan dalam buku atau kertas, dan aplikasi akan merubahnya menjadi objek 3D yang interaktif. Rumus Bangun Ruang: Sinau Geometry menyediakan rumus-rumus lengkap untuk berbagai bangun ruang seperti kubus, balok, prisma, dan lainnya. Penghargaan Lomba:Sinau Geometry meraih juara 1 dalam lomba expo 2024 Universitas Teknokrat Indonesia, menghadirkan aplikasi yang menjadi sorotan dan memenangkan penghargaan untuk kontribusi inovatif dalam pendidikan matematika. Testimoni:“Fitur scan gambar menjadi objek 3D sangat menarik dan membantu anak-anak kami memahami konsep bangun ruang dengan lebih mudah.” - Ibu Ani, Guru Matematika “Kami bangga bisa menjadi bagian dari proyek Sinau Geometry yang berhasil meraih juara 1 dalam lomba academic expo 2024 Universitas Teknokrat Indonesia.” - Tim BBC Demo dan Presentasi: Demo Aplikasi (coming soon) Presentasi Expo 2024 (coming soon) ","date":"2024-03-12","objectID":"/proj/sinau-geometry/:0:1","series":null,"tags":null,"title":"Sinau Geometry","uri":"/proj/sinau-geometry/#testimoni"},{"categories":[],"content":"Pada artikel kali ini kita akan mengenal beberapa bentuk dari visualisasi data.","date":"2024-03-09","objectID":"/posts/belajar-visualisasi-data/","series":[],"tags":["Machine Learning"],"title":"Belajar Visualisasi Data","uri":"/posts/belajar-visualisasi-data/"},{"categories":[],"content":"Dalam era informasi yang kaya akan data, kemampuan untuk memahami dan menginterpretasikan informasi menjadi kunci dalam pengambilan keputusan yang efektif. Di sinilah pentingnya visualisasi data menjadi semakin terasa. Visualisasi data bukan hanya tentang grafik dan diagram yang menarik, tetapi juga tentang kemampuan untuk merangkum kompleksitas informasi menjadi gambaran yang jelas dan mudah dipahami. ","date":"2024-03-09","objectID":"/posts/belajar-visualisasi-data/:0:0","series":[],"tags":["Machine Learning"],"title":"Belajar Visualisasi Data","uri":"/posts/belajar-visualisasi-data/#"},{"categories":[],"content":"\rMedia Visualisasi DataTahukah kalian macam - macam bentuk media yang digunakan dalam visualisasi data? berikut ini penjelasannya: ","date":"2024-03-09","objectID":"/posts/belajar-visualisasi-data/:0:0","series":[],"tags":["Machine Learning"],"title":"Belajar Visualisasi Data","uri":"/posts/belajar-visualisasi-data/#media-visualisasi-data"},{"categories":[],"content":"\rTabelPastinya kalian pernah menyusun data ke dalam sebuah baris dan kolom, maka selamat, kalian telah berhasil membuat sebuah tabel. Jadi, tabel merupakan salah satu bentuk dari media visualisasi data yang sederhana dan sering kita temukan. Data yang ada di dalam tabel biasanya dikategorikan dalam baris atau kolom tertentu yang kemudian dapat di urutkan dengan mudah, contohnya di urutkan secara menaik (Ascending) atau menurun (Descending). Hal tersebut memudahkan kita untuk menyusun data sesuai dengan perintah yang diinginkan. Contoh studi kasusnya, bayangkan kalian memiliki data sayur - sayuran seperti, sawi (50 ikat), kangkung (35 ikat), bayam (25 ikat), selada (10 ikat). Bagaimana kalian mencatatnya supaya lebih mudah dibaca? salah satu caranya adalah bisa dengan membuat tabel seperti berikut: Nama Sayur Jumlah Sawi 50 Kangkung 35 Bayam 25 Selada 10 Total 120 Setelah diurutkan secara ascending berdasarkan nama sayur sebagai berikut: Nama Sayur Jumlah Bayam 25 Kangkung 35 Sawi 50 Selada 10 Total 120 Dari tabel di atas, kita dapat membaca data sayur - sayuran dengan lebih efektif dan mengetahui jumlah total sayur. Dari data tersebut kita juga dapat mengurutkan dari jumlah sayur yang paling banyak, paling sedikit, atau mengurutkan nama sayur berdasarkan abjad. Terdapat beberapa aturan dasar dalam penulisan tabel yaitu sebagai berikut: Penulisan Judul Dalam menulis judul pastikan sudah mencakup isi dari tabel yang di buat. Usahakan menggunakan font yang jelas dan mudah dibaca. Sehingga, pembaca akan dapat dengan mudah memahami tabel apa yang tersaji. Simpel Simplicity is a must (Kesederhanaan adalah suatu keharusan). Jangan terlalu berlebihan dalam mendesain sebuah tabel. Akibatnya pembaca tidak fokus pada data yang disajikan. Penulisan variabel di dalamnya juga singkat saja. Penjelasan Simbol Apabila dalam tabel terdapat simbol atau istilah tertentu, pastikan untuk dapat menjelaskannya pada catatan kaki tabel tersebut. Penekanan Penekanan yang dimaksud adalah cara kita memfokuskan perhatian pembaca pada pokok data. Misal, dalam penulisan tabel di atas, nama sayur menggunakan warna background biru gelap supaya pembaca bisa dengan mudah membedakan nama sayur dan jumlah sayur. Jika suatu data ada dalam kategori yang sama dan dapat dijumlahkan, maka kalian dapat menyertakan total di akhir datanya seperti pada contoh tabel di atas. Sumber Tabel Apabila tabel yang di sajikan bukan milik kalian, maka sertakan sumber di catatan kaki tabel tersebut. ","date":"2024-03-09","objectID":"/posts/belajar-visualisasi-data/:1:0","series":[],"tags":["Machine Learning"],"title":"Belajar Visualisasi Data","uri":"/posts/belajar-visualisasi-data/#tabel"},{"categories":[],"content":"\rDiagramSaya rasa kita semua sudah tidak asing dengan kata Diagram. Sebenarnya apa itu diagram? Diagram merupakan sebuah representasi data yang digambarkan dalam bentuk grafik. Jika kalian memiliki sebuah data yang ingin diproyeksikan dalam bentuk diagram, berikut beberapa tipe diagram yang bisa kalian coba gunakan. ","date":"2024-03-09","objectID":"/posts/belajar-visualisasi-data/:2:0","series":[],"tags":["Machine Learning"],"title":"Belajar Visualisasi Data","uri":"/posts/belajar-visualisasi-data/#diagram"},{"categories":[],"content":"\rDiagram BatangApakah kalian pernah membuat diagram batang? Jadi, Diagram batang merupakan salah satu jenis grafik yang hampir sering kita jumpai dalam visualisasi data. Mengapa demikian, karena diagram ini dapat menunjukkan perbandingan angka pada kategori tertentu. Jumlah elemen batang dari diagram ini sebaiknya tidak terlalu banyak supaya label dari data tersebut masih bisa terbaca atau tidak terpotong. Pada diagram batang terdapat dua sumbu, sumbu X pada diagram batang menunjukkan kategori data sedangkan sumbu Y menunjukkan skala nilai dari data dalam satuan ukuran tertentu. Pastikan pada sumbu Y nilai awalnya adalah 0 supaya diagram kalian terlihat akurat dan mengurangi kesalahpahaman dalam mengartikan data. Selain itu, perhatikan pula penulisan label diagram. Hindari penulisan label secara vertikal maupun diagonal supaya tidak menyulitkan pembaca. Unsur warna juga penting dalam penyajian data diagram. Usahakan menggunakan warna yang konsisten supaya mudah dipahami. Berikut contoh dari diagram batang Perbandingan Pengeluaran Bulanan: ","date":"2024-03-09","objectID":"/posts/belajar-visualisasi-data/:2:1","series":[],"tags":["Machine Learning"],"title":"Belajar Visualisasi Data","uri":"/posts/belajar-visualisasi-data/#diagram-batang"},{"categories":[],"content":"\rDiagram GarisDiagram garis biasanya menyajikan perubahan data dalam periode waktu tertentu. Secara umum, diagram garis digunakan untuk melihat perkembangan data tertentu yang berlangsung secara terus menerus atau berkelanjutan. Contoh dari data yang bisa digambarkan dalam diagram garis seperti, perkembangan jumlah penduduk selama 10 tahun terakhir. Dalam proses penggambaran diagram garis diperlukan sumbu mendatar atau X dan sumbu tegak atau Y. Sumbu X berfungsi untuk menunjukkan interval waktu sedangkan sumbu Y menunjukkan kuantitas atau nilai dari data tersebut seperti total penjualan, biaya yang dikeluarkan, jumlah pendapatan, dan lain sebagainya. Kemudian, buat tanda titik koordinat yang menunjukkan nilai data berdasarkan waktunya. Setelah semua data ditandai dengan titik koordinat, maka selanjutnya buatlah garis yang menghubungkan titik - titik tersebut. Dari penarikan garis tersebut kita bisa melihat pola perkembangan datanya cenderung naik, stabil, atau turun. Contoh Studi Kasus Ada sebuah toko buku dan ingin melihat perkembangan penjualan tahun 2023 yang lalu. Terdapat tabel seperti berikut: Bulan Jumlah Januari 150 Februari 130 Maret 180 April 190 Mei 250 Juni 200 Juli 230 Agustus 250 September 280 Oktober 290 November 300 Desember 350 Total 2800 Untuk mempermudah melihat perkembangan data, maka kita dapat membuat data dalam tabel tersebut menjadi sebuah diagram garis berikut ini: Diagram Garis Penjualan Buku Tahun 2023 Dari data tersebut, kita dapat melihat tren penjualan buku pada toko yang cenderung naik pada tahun 2023. Walaupun pada bulan Januari sampai Juni sedikit tidak stabil karena terjadi kenaikan dan penurunan, namun pada bulan Juni sampai Desember penjualan cenderung naik. Nah, dengan menggunakan diagram garis data tersebut lebih mudah dibaca, bukan? ","date":"2024-03-09","objectID":"/posts/belajar-visualisasi-data/:2:2","series":[],"tags":["Machine Learning"],"title":"Belajar Visualisasi Data","uri":"/posts/belajar-visualisasi-data/#diagram-garis"},{"categories":[],"content":"\rDiagram LingkaranApakah kalian pernah membuat diagram lingkaran sebelumnya? Diagram lingkaran mirip seperti sebuah makanan pizza yang diiris dengan porsi tertentu. pada konteks data, irisan pizza tersebut menggambarkan persentase data nilai atau kuantitas. Apabila irisan tersebut dijumlahkan nilainya, maka seharusnya akan menghasilkan 100 persen atau 360 derajat. Diagram lingkaran biasanya sering digunakan oleh perusahaan atau dunia pendidikan untuk merepresentasikan data. Diagram lingkaran tidak hanya menunjukkan jumlah relatif dari kuantitas suatu data satu sama lain, namun dapat menunjukkan keseluruhan data dan kuantitas sebuah kategori data itu sendiri relatif vis a vis atau berhubungan dengan keseluruhan data yang ada. Untuk memperjelas pemahaman tentang diagram lingkaran, berikut terdapat contoh survei terhadap mahasiswa yang memiliki hobi sepak bola, basket, dan bulu tangkis untuk pelatihan menghadapi lomba tingkat nasional. Hobi Jumlah Sepak Bola 17 Basket 3 Bulu Tangkis 5 Lainnya 10 Total 35 Apabila data tabel di atas digambarkan dengan diagram lingkaran, berikut hasilnya: Dari 35 siswa dalam satu kelas, sepak bola paling digemari dibandingkan dengan hobi lainnya. Basket dan bulu tangkis masing - masing sebanyak 8,57% dan 14,29%. Sedangkan 28,57% atau sama dengan 10 orang siswa lainnya memiliki hobi lainnya seperti bermain musik, jalan - jalan, dan membaca novel. Terdapat rumus untuk menjadikan jumlah data ke dalam bentuk persen, berikut ini perhitungan rumus diagram lingkaran dalam bentuk persen dan derajat. Dalam bentuk Persen (jumlah data dalam kategori tertentu / Total data keseluruhan) X 100 Dalam bentuk Derajat (jumlah data dalam kategori tertentu / Total data keseluruhan) X 360 Terdapat beberapa aturan dasar yang perlu diperhatikan dalam pembuatan diagram lingkaran, diantaranya: Pastikan terdapat judul pada diagram lingkaran. Jika membuat diagram dalam satuan persen maka pastikan jumlah total datanya adalah 100%, sedangkan untuk satuan derajat totalnya adalah 360 derajat. Penulisan label juga penting untuk penanda dari suatu data, bisa menunjukkan kategori data, nilai, ataupun keduanya. Buat warna masing - masing irisan berbeda untuk membedakan datanya. Usahakan data yang di gambarkan dalam diagram maksimal 5 irisan supaya tidak menyulitkan pembaca. ","date":"2024-03-09","objectID":"/posts/belajar-visualisasi-data/:2:3","series":[],"tags":["Machine Learning"],"title":"Belajar Visualisasi Data","uri":"/posts/belajar-visualisasi-data/#diagram-lingkaran"},{"categories":[],"content":"Memahami dua arsitektur pemrograman yang sering digunakan serta mengenal kelebihan dan kekurangan dari masing masing arsitektur.","date":"2024-03-08","objectID":"/posts/microservices-vs-monolithic/","series":[],"tags":["Microservices"],"title":"Memahami Arsitektur Monolithic \u0026 Microservices: Perbandingan, Kelebihan dan kekurangannya","uri":"/posts/microservices-vs-monolithic/"},{"categories":[],"content":"Dalam dunia pengembangan perangkat lunak, pemilihan arsitektur aplikasi menjadi langkah krusial yang akan memengaruhi kinerja, skalabilitas, dan fleksibilitas sebuah sistem. Dua pendekatan utama yang sering dibahas adalah Monolithic dan Microservices. Dalam artikel ini, kita akan memperbandingkan kedua arsitektur ini, melihat kelebihan, kekurangan, serta situasi yang tepat untuk menerapkan masing-masing. ","date":"2024-03-08","objectID":"/posts/microservices-vs-monolithic/:0:0","series":[],"tags":["Microservices"],"title":"Memahami Arsitektur Monolithic \u0026 Microservices: Perbandingan, Kelebihan dan kekurangannya","uri":"/posts/microservices-vs-monolithic/#"},{"categories":[],"content":"\rPengenalan Monolithic ArsitekturMonolithic Arsitektur ialah cara membuat atau membangun aplikasi yang dimana komponen / modul yang berbeda digabungkan menjadi satu program atau 1 codebase. ","date":"2024-03-08","objectID":"/posts/microservices-vs-monolithic/:0:0","series":[],"tags":["Microservices"],"title":"Memahami Arsitektur Monolithic \u0026 Microservices: Perbandingan, Kelebihan dan kekurangannya","uri":"/posts/microservices-vs-monolithic/#pengenalan-monolithic-arsitektur"},{"categories":[],"content":"\rContoh Diagram Aplikasi Monolithicflowchart LR; A[Client Web / Mobile App] --\u003e B(Load Balancer) B --\u003e APLIKASI subgraph APLIKASI D\u003eCatalog] E{{Order}} F[/Payment/] end APLIKASI --\u003e G[(Database)] style A fill:#ffe28f,color:#000 style B fill:grey,color:#000 style D fill:#9bbbf3,color:black style E fill:#ad9dd1,color:black style F fill:#a76485,color:black style APLIKASI fill:#d4e6ce,color:#000 style G fill:#e5c9d4,color:#000 Penjelasan Diagram tersebut menggambarkan bagaimana aplikasi monolithic beroperasi. Client (pengguna) terhubung ke aplikasi melalui load balancer. Aplikasi ini memiliki tiga fitur utama (Catalog, Order, Payment) yang berinteraksi dengan database untuk menyimpan dan mengambil data. Ini adalah pendekatan yang umum digunakan dalam pengembangan aplikasi sebelum adanya arsitektur microservices yang lebih modern. ","date":"2024-03-08","objectID":"/posts/microservices-vs-monolithic/:1:0","series":[],"tags":["Microservices"],"title":"Memahami Arsitektur Monolithic \u0026 Microservices: Perbandingan, Kelebihan dan kekurangannya","uri":"/posts/microservices-vs-monolithic/#contoh-diagram-aplikasi-monolithic"},{"categories":[],"content":"\rKelebihan Aplikasi Monolithic Mudah untuk di develop. Simple untuk di deploy. Simple untuk di scale secara vertikal. Gampang untuk di test. ","date":"2024-03-08","objectID":"/posts/microservices-vs-monolithic/:2:0","series":[],"tags":["Microservices"],"title":"Memahami Arsitektur Monolithic \u0026 Microservices: Perbandingan, Kelebihan dan kekurangannya","uri":"/posts/microservices-vs-monolithic/#kelebihan-aplikasi-monolithic"},{"categories":[],"content":"\rKekurangan Aplikasi Monolithic Mengintimidasi programmer baru. Overloaded IDE. Ketika deploy, berarti kita mendeploy seluruh code / seluruh aplikasi. Susah ketika mau scale terlebih secara horizontal. Ketika ada error, maka 1 aplikasi akan terpengaruh bahkan mati. Susah untuk mengadopsi teknologi baru. apa itu scale?\r“Scaling” dalam konteks pengembangan aplikasi merujuk pada kemampuan aplikasi untuk menangani pertumbuhan beban kerja atau traffic. Ada dua cara umum untuk melakukan scaling: scaling vertikal (vertical scaling) dan scaling horizontal (horizontal scaling). Scale Vertikal: Meningkatkan spesifikasi seperti kapasitas (RAM, CPU) pada satu instance atau node aplikasi. Scale Horizontal: Menambahkan lebih banyak instance atau node ke dalam aplikasi untuk mendistribusikan beban kerja.\r","date":"2024-03-08","objectID":"/posts/microservices-vs-monolithic/:3:0","series":[],"tags":["Microservices"],"title":"Memahami Arsitektur Monolithic \u0026 Microservices: Perbandingan, Kelebihan dan kekurangannya","uri":"/posts/microservices-vs-monolithic/#kekurangan-aplikasi-monolithic"},{"categories":[],"content":"\rPengenalan Microservices ArsitekturMicroservices arsitektur ialah sebuah arsitektur aplikasi yang dibangun dari kumpulan service - service kecil yang saling terhubung. ","date":"2024-03-08","objectID":"/posts/microservices-vs-monolithic/:0:0","series":[],"tags":["Microservices"],"title":"Memahami Arsitektur Monolithic \u0026 Microservices: Perbandingan, Kelebihan dan kekurangannya","uri":"/posts/microservices-vs-monolithic/#pengenalan-microservices-arsitektur"},{"categories":[],"content":"\rContoh Diagram Aplikasi Microservicesflowchart LR; subgraph APLIKASI D\u003eCatalog] --\u003e db1[(Database)] E(Order) --\u003e db2[(Database)] F[/Payment/] --\u003e db3[(Database)] end style D fill:#9bbbf3,color:black style E fill:#ad9dd1,color:black style F fill:#a76485,color:black style APLIKASI fill:#fff,color:#000 style db1 fill:grey,color:white style db2 fill:grey,color:white style db3 fill:gray,color:white Penjelasan Dalam arsitektur microservices pada diagram di atas, setiap layanan (Catalog, Order, dan Payment) memiliki tugasnya sendiri dan terpisah, memungkinkan aplikasi untuk lebih modular dan mudah di-maintain. Masing-masing layanan memiliki akses ke database yang khusus untuk fungsinya sendiri. Hal ini memungkinkan pengembang untuk mengubah, memperbarui, atau memperbaiki satu layanan tanpa memengaruhi layanan lainnya. Arsitektur ini membantu dalam pengembangan aplikasi yang lebih fleksibel, scalable, dan dapat dikembangkan oleh tim yang terpisah secara bersamaan. ","date":"2024-03-08","objectID":"/posts/microservices-vs-monolithic/:1:0","series":[],"tags":["Microservices"],"title":"Memahami Arsitektur Monolithic \u0026 Microservices: Perbandingan, Kelebihan dan kekurangannya","uri":"/posts/microservices-vs-monolithic/#contoh-diagram-aplikasi-microservices"},{"categories":[],"content":"\rKelebihan Aplikasi Microservices Mudah untuk di pahami bagi developer karena 1 service biasanya berukuran kecil. Ketika ada service yang error maka tidak akan berimbas pada service lain. Better Deploy, karena masing - masing service bisa di deploy secara independent. Better Testability, karena service berukuran kecil maka mudah untuk di test. Ringan untuk IDE. Mudah untuk mengadopsi teknologi baru. Mudah untuk scaling secara independent untuk masing - masing service. ","date":"2024-03-08","objectID":"/posts/microservices-vs-monolithic/:2:0","series":[],"tags":["Microservices"],"title":"Memahami Arsitektur Monolithic \u0026 Microservices: Perbandingan, Kelebihan dan kekurangannya","uri":"/posts/microservices-vs-monolithic/#kelebihan-aplikasi-microservices"},{"categories":[],"content":"\rKekurangan Aplikasi Microservices Testing yang melibatkan interaksi antar service menjadi susah. Tidak mudah mengimplementasikan sebuah fitur / request, yang melibatkan service lain, karena harus di diskusikan secara hati - hati bersama tim. Tidak mudah untuk menghandle jumlah service yang banyak. ","date":"2024-03-08","objectID":"/posts/microservices-vs-monolithic/:3:0","series":[],"tags":["Microservices"],"title":"Memahami Arsitektur Monolithic \u0026 Microservices: Perbandingan, Kelebihan dan kekurangannya","uri":"/posts/microservices-vs-monolithic/#kekurangan-aplikasi-microservices"},{"categories":[],"content":"\rMonolithic VS Microservicesflowchart LR; subgraph Perbandingan subgraph Monolithic A\u003eCatalog] B[/Order/] C{{Payment}} end title[dengan] subgraph Microservices D\u003eCatalog] E[/Order/] F{{Payment}} end end style Perbandingan fill:#fff,color:black style Microservices fill:#fff,color:#000 style Monolithic fill:#fff,color:#000,stroke:black style title fill:#fff,color:#000,stroke:none style A fill:#88bd71,color:white style D fill:#88bd71,color:white style B fill:#f09834,color:white style E fill:#f09834,color:white style C fill:#c60000,color:white style F fill:#c60000,color:white ","date":"2024-03-08","objectID":"/posts/microservices-vs-monolithic/:4:0","series":[],"tags":["Microservices"],"title":"Memahami Arsitektur Monolithic \u0026 Microservices: Perbandingan, Kelebihan dan kekurangannya","uri":"/posts/microservices-vs-monolithic/#monolithic-vs-microservices"},{"categories":[],"content":"\rPerbandingan","date":"2024-03-08","objectID":"/posts/microservices-vs-monolithic/:5:0","series":[],"tags":["Microservices"],"title":"Memahami Arsitektur Monolithic \u0026 Microservices: Perbandingan, Kelebihan dan kekurangannya","uri":"/posts/microservices-vs-monolithic/#perbandingan"},{"categories":[],"content":"\rMonolithic Sebuah aplikasi besar yang biasanya hanya 1 codebase. Sedikit susah untuk scaling berdasarkan kebutuhan. Umumnya hanya mempunyai 1 database. Susah untuk mengganti teknologi yang telah di pakai. Deploy berarti merilis keseluruhan source code. ","date":"2024-03-08","objectID":"/posts/microservices-vs-monolithic/:5:1","series":[],"tags":["Microservices"],"title":"Memahami Arsitektur Monolithic \u0026 Microservices: Perbandingan, Kelebihan dan kekurangannya","uri":"/posts/microservices-vs-monolithic/#monolithic"},{"categories":[],"content":"\rMicroservices Dibangun dari service - service kecil yang di buat berdasarkan domain bisnis. Mudah untuk scaling berdasarkan kebutuhan. Masing - masing service mempunyai database tersendiri. Mudah untuk mengadopsi teknologi baru. Deploy hanya pada service - service yang di ubah saja. ","date":"2024-03-08","objectID":"/posts/microservices-vs-monolithic/:5:2","series":[],"tags":["Microservices"],"title":"Memahami Arsitektur Monolithic \u0026 Microservices: Perbandingan, Kelebihan dan kekurangannya","uri":"/posts/microservices-vs-monolithic/#microservices"},{"categories":[],"content":"\rKesimpulanMonolithic Arsitektur cocok untuk aplikasi sederhana dengan pengembangan yang mudah, namun kurang fleksibel dalam skalabilitas dan adopsi teknologi baru. Sementara itu, Microservices lebih baik untuk aplikasi kompleks yang membutuhkan skalabilitas tinggi, meskipun memerlukan manajemen yang kompleks. Pemilihan antara keduanya harus didasarkan pada kebutuhan aplikasi dan tim pengembang. ","date":"2024-03-08","objectID":"/posts/microservices-vs-monolithic/:6:0","series":[],"tags":["Microservices"],"title":"Memahami Arsitektur Monolithic \u0026 Microservices: Perbandingan, Kelebihan dan kekurangannya","uri":"/posts/microservices-vs-monolithic/#kesimpulan"},{"categories":null,"content":" ACADEMIC EXPO TEKNOKRAT 2024: 1st Place in Augmented Reality Project Competition (image)\rData Science with Python (image)\rPython Fundamental for Data Science (image)\rJunior Technopreneurship (image)\rFundamental SQL Using SELECT Statement (image)\rJunior Database Designer (image)\rR Fundamental for Data Science (image)\r","date":"2024-03-07","objectID":"/certificate/:0:0","series":null,"tags":null,"title":"Certification","uri":"/certificate/#"},{"categories":null,"content":"\rProfil SayaSaya Afrando Sharein Ramadhan, seorang mahasiswa yang bersemangat di Jurusan Informatika di Universitas Teknokrat Indonesia. Saya memiliki minat yang besar dalam teknologi informasi, dan berusaha untuk terus belajar dan mengembangkan keterampilan saya. ","date":"2024-03-07","objectID":"/about/:1:0","series":null,"tags":null,"title":"About Me","uri":"/about/#profil-saya"},{"categories":null,"content":"\rRiwayat Pendidikan\rRekayasa Perangkat Lunak - SMKN 2 Terbanggi Besar2019 - 2021 Saya lulus dari Sekolah Menengah Kejuruan jurusan Rekayasa Perangkat Lunak dengan tepat waktu dan nilai yang cukup memuaskan, disini saya mendapatkan banyak ilmu dasar di bidang teknologi informasi. Mahasiswa Informatika - Universitas Teknokrat Indonesia2022 - Sekarang Saat ini, saya sedang menempuh pendidikan di Jurusan Teknik Informatika di Universitas Teknokrat Indonesia. Selama masa studi saya, saya telah mengambil berbagai mata kuliah dan mendalami keilmuan tentang pemrograman, basis data, jaringan komputer, dan topik-topik lainnya dalam bidang teknologi informasi. ","date":"2024-03-07","objectID":"/about/:2:0","series":null,"tags":null,"title":"About Me","uri":"/about/#riwayat-pendidikan"},{"categories":null,"content":"\rRiwayat Pendidikan\rRekayasa Perangkat Lunak - SMKN 2 Terbanggi Besar2019 - 2021 Saya lulus dari Sekolah Menengah Kejuruan jurusan Rekayasa Perangkat Lunak dengan tepat waktu dan nilai yang cukup memuaskan, disini saya mendapatkan banyak ilmu dasar di bidang teknologi informasi. Mahasiswa Informatika - Universitas Teknokrat Indonesia2022 - Sekarang Saat ini, saya sedang menempuh pendidikan di Jurusan Teknik Informatika di Universitas Teknokrat Indonesia. Selama masa studi saya, saya telah mengambil berbagai mata kuliah dan mendalami keilmuan tentang pemrograman, basis data, jaringan komputer, dan topik-topik lainnya dalam bidang teknologi informasi. ","date":"2024-03-07","objectID":"/about/:2:0","series":null,"tags":null,"title":"About Me","uri":"/about/#rekayasa-perangkat-lunak---smkn-2-terbanggi-besar"},{"categories":null,"content":"\rRiwayat Pendidikan\rRekayasa Perangkat Lunak - SMKN 2 Terbanggi Besar2019 - 2021 Saya lulus dari Sekolah Menengah Kejuruan jurusan Rekayasa Perangkat Lunak dengan tepat waktu dan nilai yang cukup memuaskan, disini saya mendapatkan banyak ilmu dasar di bidang teknologi informasi. Mahasiswa Informatika - Universitas Teknokrat Indonesia2022 - Sekarang Saat ini, saya sedang menempuh pendidikan di Jurusan Teknik Informatika di Universitas Teknokrat Indonesia. Selama masa studi saya, saya telah mengambil berbagai mata kuliah dan mendalami keilmuan tentang pemrograman, basis data, jaringan komputer, dan topik-topik lainnya dalam bidang teknologi informasi. ","date":"2024-03-07","objectID":"/about/:2:0","series":null,"tags":null,"title":"About Me","uri":"/about/#mahasiswa-informatika---universitas-teknokrat-indonesia"},{"categories":null,"content":"\rKeahlian dan Keterampilan Komunikasi \u0026 Kerjasama Team Bahasa Pemrograman: Python, Java, C++, Dart Pengembangan Web: HTML, CSS, JavaScript, PHP Framework: Bootstrap, Flutter Basis Data: MySQL, SQLite Sistem Operasi: Windows, Linux Tools: Git, Visual Studio Code, VIM ","date":"2024-03-07","objectID":"/about/:3:0","series":null,"tags":null,"title":"About Me","uri":"/about/#keahlian-dan-keterampilan"},{"categories":null,"content":"\rMinat dan Motivasi\rMinat dan Motivasi\rSaya tertarik dalam pengembangan perangkat lunak, khususnya dalam pengembangan mobile \u0026 website yang dapat memberikan manfaat bagi pengguna. Saya juga memiliki motivasi yang tinggi dalam terus belajar dan mengembangkan diri di dunia teknologi informasi.\rJika Anda tertarik untuk berkolaborasi atau memiliki pertanyaan lebih lanjut, jangan ragu untuk menghubungi saya di afrandoshareinramadhan@gmail.com atau melalui LinkedIn. Terima kasih telah meluangkan waktu untuk membaca profil saya. ","date":"2024-03-07","objectID":"/about/:4:0","series":null,"tags":null,"title":"About Me","uri":"/about/#minat-dan-motivasi"}]